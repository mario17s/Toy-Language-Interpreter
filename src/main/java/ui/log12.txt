13

ExeStack: stack=[(Ref(int) v2; (int x; (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock v1)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}+1} unlock x))) (Fork (Fork HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} unlock x)) (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (print(RHExp{expression=v1}) print(RHExp{expression=v2}))))))))))))))), Ref(int) v1;]
SymTable: dictionary={}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(Ref(int) v2; (int x; (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock v1)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}+1} unlock x))) (Fork (Fork HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} unlock x)) (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (print(RHExp{expression=v1}) print(RHExp{expression=v2}))))))))))))))), Ref(int) v1;]
SymTable: dictionary={}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(Ref(int) v2; (int x; (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock v1)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}+1} unlock x))) (Fork (Fork HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} unlock x)) (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (print(RHExp{expression=v1}) print(RHExp{expression=v2})))))))))))))))]
SymTable: dictionary={v1=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(Ref(int) v2; (int x; (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock v1)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}+1} unlock x))) (Fork (Fork HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} unlock x)) (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (print(RHExp{expression=v1}) print(RHExp{expression=v2})))))))))))))))]
SymTable: dictionary={v1=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(int x; (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock v1)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}+1} unlock x))) (Fork (Fork HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} unlock x)) (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (print(RHExp{expression=v1}) print(RHExp{expression=v2})))))))))))))), Ref(int) v2;]
SymTable: dictionary={v1=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(int x; (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock v1)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}+1} unlock x))) (Fork (Fork HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} unlock x)) (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (print(RHExp{expression=v1}) print(RHExp{expression=v2})))))))))))))), Ref(int) v2;]
SymTable: dictionary={v1=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(int x; (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock v1)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}+1} unlock x))) (Fork (Fork HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} unlock x)) (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (print(RHExp{expression=v1}) print(RHExp{expression=v2}))))))))))))))]
SymTable: dictionary={v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(int x; (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock v1)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}+1} unlock x))) (Fork (Fork HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} unlock x)) (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (print(RHExp{expression=v1}) print(RHExp{expression=v2}))))))))))))))]
SymTable: dictionary={v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock v1)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}+1} unlock x))) (Fork (Fork HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} unlock x)) (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (print(RHExp{expression=v1}) print(RHExp{expression=v2}))))))))))))), int x;]
SymTable: dictionary={v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock v1)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}+1} unlock x))) (Fork (Fork HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} unlock x)) (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (print(RHExp{expression=v1}) print(RHExp{expression=v2}))))))))))))), int x;]
SymTable: dictionary={v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock v1)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}+1} unlock x))) (Fork (Fork HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} unlock x)) (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (print(RHExp{expression=v1}) print(RHExp{expression=v2})))))))))))))]
SymTable: dictionary={x=0, v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock v1)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}+1} unlock x))) (Fork (Fork HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} unlock x)) (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (print(RHExp{expression=v1}) print(RHExp{expression=v2})))))))))))))]
SymTable: dictionary={x=0, v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(Fork (Fork HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} unlock x)) (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (print(RHExp{expression=v1}) print(RHExp{expression=v2})))))))))))), Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock v1)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}+1} unlock x)))]
SymTable: dictionary={x=0, v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(Fork (Fork HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} unlock x)) (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (print(RHExp{expression=v1}) print(RHExp{expression=v2})))))))))))), Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock v1)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}+1} unlock x)))]
SymTable: dictionary={x=0, v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(Fork (Fork HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} unlock x)) (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (print(RHExp{expression=v1}) print(RHExp{expression=v2}))))))))))))]
SymTable: dictionary={x=0, v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
14

ExeStack: stack=[(Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock v1)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}+1} unlock x)))]
SymTable: dictionary={x=0, v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(Fork (Fork HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} unlock x)) (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (print(RHExp{expression=v1}) print(RHExp{expression=v2}))))))))))))]
SymTable: dictionary={x=0, v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
14

ExeStack: stack=[(Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock v1)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}+1} unlock x)))]
SymTable: dictionary={x=0, v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (print(RHExp{expression=v1}) print(RHExp{expression=v2}))))))))))), Fork (Fork HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} unlock x))]
SymTable: dictionary={x=0, v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
14

ExeStack: stack=[(lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}+1} unlock x)), Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock v1))]
SymTable: dictionary={x=0, v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (print(RHExp{expression=v1}) print(RHExp{expression=v2}))))))))))), Fork (Fork HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} unlock x))]
SymTable: dictionary={x=0, v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
14

ExeStack: stack=[(lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}+1} unlock x)), Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock v1))]
SymTable: dictionary={x=0, v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (print(RHExp{expression=v1}) print(RHExp{expression=v2})))))))))))]
SymTable: dictionary={x=0, v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
14

ExeStack: stack=[(lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}+1} unlock x))]
SymTable: dictionary={x=0, v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
15

ExeStack: stack=[(Fork HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} unlock x))]
SymTable: dictionary={x=0, v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
16

ExeStack: stack=[(lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock v1))]
SymTable: dictionary={x=0, v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (print(RHExp{expression=v1}) print(RHExp{expression=v2})))))))))))]
SymTable: dictionary={x=0, v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
14

ExeStack: stack=[(lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}+1} unlock x))]
SymTable: dictionary={x=0, v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
15

ExeStack: stack=[(Fork HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} unlock x))]
SymTable: dictionary={x=0, v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
16

ExeStack: stack=[(lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock v1))]
SymTable: dictionary={x=0, v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (print(RHExp{expression=v1}) print(RHExp{expression=v2})))))))))), no operation]
SymTable: dictionary={x=0, v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
14

ExeStack: stack=[(HeapWriteStmt{id='v1', expression=RHExp{expression=v1}+1} unlock x), lock x]
SymTable: dictionary={x=0, v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
15

ExeStack: stack=[(HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} unlock x), Fork HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1}]
SymTable: dictionary={x=0, v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
16

ExeStack: stack=[(HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock v1), lock x]
SymTable: dictionary={x=0, v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (print(RHExp{expression=v1}) print(RHExp{expression=v2})))))))))), no operation]
SymTable: dictionary={x=0, v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
14

ExeStack: stack=[(HeapWriteStmt{id='v1', expression=RHExp{expression=v1}+1} unlock x), lock x]
SymTable: dictionary={x=0, v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
15

ExeStack: stack=[(HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} unlock x), Fork HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1}]
SymTable: dictionary={x=0, v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
16

ExeStack: stack=[(HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock v1), lock x]
SymTable: dictionary={x=0, v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(Ref(int) v2; (int x; (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock v1)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}+1} unlock x))) (Fork (Fork HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} unlock x)) (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (print(RHExp{expression=v1}) print(RHExp{expression=v2}))))))))))))))), Ref(int) v1;]
SymTable: dictionary={}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(Ref(int) v2; (int x; (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock v1)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}+1} unlock x))) (Fork (Fork HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} unlock x)) (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (print(RHExp{expression=v1}) print(RHExp{expression=v2}))))))))))))))), Ref(int) v1;]
SymTable: dictionary={}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(Ref(int) v2; (int x; (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock v1)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}+1} unlock x))) (Fork (Fork HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} unlock x)) (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (print(RHExp{expression=v1}) print(RHExp{expression=v2})))))))))))))))]
SymTable: dictionary={v1=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(Ref(int) v2; (int x; (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock v1)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}+1} unlock x))) (Fork (Fork HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} unlock x)) (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (print(RHExp{expression=v1}) print(RHExp{expression=v2})))))))))))))))]
SymTable: dictionary={v1=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(int x; (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock v1)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}+1} unlock x))) (Fork (Fork HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} unlock x)) (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (print(RHExp{expression=v1}) print(RHExp{expression=v2})))))))))))))), Ref(int) v2;]
SymTable: dictionary={v1=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(int x; (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock v1)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}+1} unlock x))) (Fork (Fork HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} unlock x)) (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (print(RHExp{expression=v1}) print(RHExp{expression=v2})))))))))))))), Ref(int) v2;]
SymTable: dictionary={v1=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(int x; (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock v1)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}+1} unlock x))) (Fork (Fork HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} unlock x)) (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (print(RHExp{expression=v1}) print(RHExp{expression=v2}))))))))))))))]
SymTable: dictionary={v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(int x; (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock v1)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}+1} unlock x))) (Fork (Fork HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} unlock x)) (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (print(RHExp{expression=v1}) print(RHExp{expression=v2}))))))))))))))]
SymTable: dictionary={v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock v1)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}+1} unlock x))) (Fork (Fork HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} unlock x)) (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (print(RHExp{expression=v1}) print(RHExp{expression=v2}))))))))))))), int x;]
SymTable: dictionary={v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock v1)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}+1} unlock x))) (Fork (Fork HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} unlock x)) (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (print(RHExp{expression=v1}) print(RHExp{expression=v2}))))))))))))), int x;]
SymTable: dictionary={v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock v1)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}+1} unlock x))) (Fork (Fork HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} unlock x)) (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (print(RHExp{expression=v1}) print(RHExp{expression=v2})))))))))))))]
SymTable: dictionary={x=0, v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock v1)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}+1} unlock x))) (Fork (Fork HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} unlock x)) (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (print(RHExp{expression=v1}) print(RHExp{expression=v2})))))))))))))]
SymTable: dictionary={x=0, v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(Fork (Fork HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} unlock x)) (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (print(RHExp{expression=v1}) print(RHExp{expression=v2})))))))))))), Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock v1)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}+1} unlock x)))]
SymTable: dictionary={x=0, v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(Fork (Fork HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} unlock x)) (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (print(RHExp{expression=v1}) print(RHExp{expression=v2})))))))))))), Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock v1)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}+1} unlock x)))]
SymTable: dictionary={x=0, v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(Fork (Fork HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} unlock x)) (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (print(RHExp{expression=v1}) print(RHExp{expression=v2}))))))))))))]
SymTable: dictionary={x=0, v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
14

ExeStack: stack=[(Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock v1)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}+1} unlock x)))]
SymTable: dictionary={x=0, v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(Fork (Fork HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} unlock x)) (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (print(RHExp{expression=v1}) print(RHExp{expression=v2}))))))))))))]
SymTable: dictionary={x=0, v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
14

ExeStack: stack=[(Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock v1)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}+1} unlock x)))]
SymTable: dictionary={x=0, v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (print(RHExp{expression=v1}) print(RHExp{expression=v2}))))))))))), Fork (Fork HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} unlock x))]
SymTable: dictionary={x=0, v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
14

ExeStack: stack=[(lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}+1} unlock x)), Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock v1))]
SymTable: dictionary={x=0, v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (print(RHExp{expression=v1}) print(RHExp{expression=v2}))))))))))), Fork (Fork HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} unlock x))]
SymTable: dictionary={x=0, v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
14

ExeStack: stack=[(lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}+1} unlock x)), Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock v1))]
SymTable: dictionary={x=0, v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (print(RHExp{expression=v1}) print(RHExp{expression=v2})))))))))))]
SymTable: dictionary={x=0, v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
14

ExeStack: stack=[(lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}+1} unlock x))]
SymTable: dictionary={x=0, v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
15

ExeStack: stack=[(Fork HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} unlock x))]
SymTable: dictionary={x=0, v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
16

ExeStack: stack=[(lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock v1))]
SymTable: dictionary={x=0, v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (print(RHExp{expression=v1}) print(RHExp{expression=v2})))))))))))]
SymTable: dictionary={x=0, v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
14

ExeStack: stack=[(lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}+1} unlock x))]
SymTable: dictionary={x=0, v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
15

ExeStack: stack=[(Fork HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} unlock x))]
SymTable: dictionary={x=0, v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
16

ExeStack: stack=[(lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock v1))]
SymTable: dictionary={x=0, v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (print(RHExp{expression=v1}) print(RHExp{expression=v2})))))))))), no operation]
SymTable: dictionary={x=0, v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
14

ExeStack: stack=[(HeapWriteStmt{id='v1', expression=RHExp{expression=v1}+1} unlock x), lock x]
SymTable: dictionary={x=0, v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
15

ExeStack: stack=[(HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} unlock x), Fork HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1}]
SymTable: dictionary={x=0, v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
16

ExeStack: stack=[(HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock v1), lock x]
SymTable: dictionary={x=0, v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (print(RHExp{expression=v1}) print(RHExp{expression=v2})))))))))), no operation]
SymTable: dictionary={x=0, v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
14

ExeStack: stack=[(HeapWriteStmt{id='v1', expression=RHExp{expression=v1}+1} unlock x), lock x]
SymTable: dictionary={x=0, v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
15

ExeStack: stack=[(HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} unlock x), Fork HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1}]
SymTable: dictionary={x=0, v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
16

ExeStack: stack=[(HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock v1), lock x]
SymTable: dictionary={x=0, v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(Ref(int) v2; (int x; (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock v1)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}+1} unlock x))) (Fork (Fork HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} unlock x)) (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (print(RHExp{expression=v1}) print(RHExp{expression=v2}))))))))))))))), Ref(int) v1;]
SymTable: dictionary={}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(Ref(int) v2; (int x; (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock v1)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}+1} unlock x))) (Fork (Fork HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} unlock x)) (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (print(RHExp{expression=v1}) print(RHExp{expression=v2}))))))))))))))), Ref(int) v1;]
SymTable: dictionary={}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(Ref(int) v2; (int x; (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock v1)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}+1} unlock x))) (Fork (Fork HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} unlock x)) (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (print(RHExp{expression=v1}) print(RHExp{expression=v2})))))))))))))))]
SymTable: dictionary={v1=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(Ref(int) v2; (int x; (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock v1)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}+1} unlock x))) (Fork (Fork HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} unlock x)) (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (print(RHExp{expression=v1}) print(RHExp{expression=v2})))))))))))))))]
SymTable: dictionary={v1=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(int x; (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock v1)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}+1} unlock x))) (Fork (Fork HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} unlock x)) (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (print(RHExp{expression=v1}) print(RHExp{expression=v2})))))))))))))), Ref(int) v2;]
SymTable: dictionary={v1=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(int x; (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock v1)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}+1} unlock x))) (Fork (Fork HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} unlock x)) (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (print(RHExp{expression=v1}) print(RHExp{expression=v2})))))))))))))), Ref(int) v2;]
SymTable: dictionary={v1=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(int x; (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock v1)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}+1} unlock x))) (Fork (Fork HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} unlock x)) (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (print(RHExp{expression=v1}) print(RHExp{expression=v2}))))))))))))))]
SymTable: dictionary={v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(int x; (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock v1)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}+1} unlock x))) (Fork (Fork HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} unlock x)) (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (print(RHExp{expression=v1}) print(RHExp{expression=v2}))))))))))))))]
SymTable: dictionary={v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock v1)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}+1} unlock x))) (Fork (Fork HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} unlock x)) (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (print(RHExp{expression=v1}) print(RHExp{expression=v2}))))))))))))), int x;]
SymTable: dictionary={v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock v1)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}+1} unlock x))) (Fork (Fork HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} unlock x)) (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (print(RHExp{expression=v1}) print(RHExp{expression=v2}))))))))))))), int x;]
SymTable: dictionary={v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock v1)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}+1} unlock x))) (Fork (Fork HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} unlock x)) (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (print(RHExp{expression=v1}) print(RHExp{expression=v2})))))))))))))]
SymTable: dictionary={x=0, v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock v1)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}+1} unlock x))) (Fork (Fork HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} unlock x)) (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (print(RHExp{expression=v1}) print(RHExp{expression=v2})))))))))))))]
SymTable: dictionary={x=0, v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(Fork (Fork HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} unlock x)) (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (print(RHExp{expression=v1}) print(RHExp{expression=v2})))))))))))), Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock v1)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}+1} unlock x)))]
SymTable: dictionary={x=0, v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(Fork (Fork HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} unlock x)) (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (print(RHExp{expression=v1}) print(RHExp{expression=v2})))))))))))), Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock v1)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}+1} unlock x)))]
SymTable: dictionary={x=0, v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(Fork (Fork HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} unlock x)) (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (print(RHExp{expression=v1}) print(RHExp{expression=v2}))))))))))))]
SymTable: dictionary={x=0, v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
14

ExeStack: stack=[(Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock v1)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}+1} unlock x)))]
SymTable: dictionary={x=0, v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(Fork (Fork HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} unlock x)) (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (print(RHExp{expression=v1}) print(RHExp{expression=v2}))))))))))))]
SymTable: dictionary={x=0, v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
14

ExeStack: stack=[(Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock v1)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}+1} unlock x)))]
SymTable: dictionary={x=0, v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (print(RHExp{expression=v1}) print(RHExp{expression=v2}))))))))))), Fork (Fork HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} unlock x))]
SymTable: dictionary={x=0, v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
14

ExeStack: stack=[(lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}+1} unlock x)), Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock v1))]
SymTable: dictionary={x=0, v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (print(RHExp{expression=v1}) print(RHExp{expression=v2}))))))))))), Fork (Fork HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} unlock x))]
SymTable: dictionary={x=0, v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
14

ExeStack: stack=[(lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}+1} unlock x)), Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock v1))]
SymTable: dictionary={x=0, v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (print(RHExp{expression=v1}) print(RHExp{expression=v2})))))))))))]
SymTable: dictionary={x=0, v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
14

ExeStack: stack=[(lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}+1} unlock x))]
SymTable: dictionary={x=0, v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
15

ExeStack: stack=[(Fork HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} unlock x))]
SymTable: dictionary={x=0, v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
16

ExeStack: stack=[(lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock v1))]
SymTable: dictionary={x=0, v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (print(RHExp{expression=v1}) print(RHExp{expression=v2})))))))))))]
SymTable: dictionary={x=0, v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
14

ExeStack: stack=[(lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}+1} unlock x))]
SymTable: dictionary={x=0, v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
15

ExeStack: stack=[(Fork HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} unlock x))]
SymTable: dictionary={x=0, v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
16

ExeStack: stack=[(lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock v1))]
SymTable: dictionary={x=0, v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (print(RHExp{expression=v1}) print(RHExp{expression=v2})))))))))), no operation]
SymTable: dictionary={x=0, v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
14

ExeStack: stack=[(HeapWriteStmt{id='v1', expression=RHExp{expression=v1}+1} unlock x), lock x]
SymTable: dictionary={x=0, v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
15

ExeStack: stack=[(HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} unlock x), Fork HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1}]
SymTable: dictionary={x=0, v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
16

ExeStack: stack=[(HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock v1), lock x]
SymTable: dictionary={x=0, v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (print(RHExp{expression=v1}) print(RHExp{expression=v2})))))))))), no operation]
SymTable: dictionary={x=0, v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
14

ExeStack: stack=[(HeapWriteStmt{id='v1', expression=RHExp{expression=v1}+1} unlock x), lock x]
SymTable: dictionary={x=0, v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
15

ExeStack: stack=[(HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} unlock x), Fork HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1}]
SymTable: dictionary={x=0, v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
16

ExeStack: stack=[(HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock v1), lock x]
SymTable: dictionary={x=0, v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(Ref(int) v2; (int x; (int q; (HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))))))))), Ref(int) v1;]
SymTable: dictionary={}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(Ref(int) v2; (int x; (int q; (HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))))))))), Ref(int) v1;]
SymTable: dictionary={}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(Ref(int) v2; (int x; (int q; (HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))))))))))]
SymTable: dictionary={v1=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(Ref(int) v2; (int x; (int q; (HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))))))))))]
SymTable: dictionary={v1=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(int x; (int q; (HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))))))))), Ref(int) v2;]
SymTable: dictionary={v1=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(int x; (int q; (HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))))))))), Ref(int) v2;]
SymTable: dictionary={v1=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(int x; (int q; (HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))))))))]
SymTable: dictionary={v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(int x; (int q; (HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))))))))]
SymTable: dictionary={v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(int q; (HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))))))), int x;]
SymTable: dictionary={v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(int q; (HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))))))), int x;]
SymTable: dictionary={v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(int q; (HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))))))))]
SymTable: dictionary={x=0, v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(int q; (HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))))))))]
SymTable: dictionary={x=0, v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))))))), int q;]
SymTable: dictionary={x=0, v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))))))), int q;]
SymTable: dictionary={x=0, v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))))))]
SymTable: dictionary={q=0, x=0, v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))))))]
SymTable: dictionary={q=0, x=0, v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))))), HeapAllocStmt{id='v1', expression=20}]
SymTable: dictionary={q=0, x=0, v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))))), HeapAllocStmt{id='v1', expression=20}]
SymTable: dictionary={q=0, x=0, v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))))))]
SymTable: dictionary={q=0, x=0, v1=RefValue(1int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20}, newFree=2}
-------------------------
13

ExeStack: stack=[(HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))))))]
SymTable: dictionary={q=0, x=0, v1=RefValue(1int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20}, newFree=2}
-------------------------
13

ExeStack: stack=[(newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))))), HeapAllocStmt{id='v2', expression=30}]
SymTable: dictionary={q=0, x=0, v1=RefValue(1int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20}, newFree=2}
-------------------------
13

ExeStack: stack=[(newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))))), HeapAllocStmt{id='v2', expression=30}]
SymTable: dictionary={q=0, x=0, v1=RefValue(1int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20}, newFree=2}
-------------------------
13

ExeStack: stack=[(newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))))]
SymTable: dictionary={q=0, x=0, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))))]
SymTable: dictionary={q=0, x=0, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))), newlock x]
SymTable: dictionary={q=0, x=0, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))), newlock x]
SymTable: dictionary={q=0, x=0, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))))]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))))]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))), Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x)))]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))), Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x)))]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x)))]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x)))]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))), newlock q]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x)), Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x))]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))), newlock q]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x)), Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x))]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
15

ExeStack: stack=[(lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x))]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
15

ExeStack: stack=[(lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x))]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))), Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q)))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x), lock x]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
15

ExeStack: stack=[(HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x), lock x]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))), Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q)))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x), lock x]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
15

ExeStack: stack=[(HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x), lock x]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x), lock x]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
15

ExeStack: stack=[(HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
16

ExeStack: stack=[(Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q)))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x), lock x]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
15

ExeStack: stack=[(HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
16

ExeStack: stack=[(Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q)))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))), no operation]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x), lock x]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
15

ExeStack: stack=[unlock x, HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1}]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
16

ExeStack: stack=[(lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q)), Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))), no operation]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x), lock x]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
15

ExeStack: stack=[unlock x, HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1}]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
16

ExeStack: stack=[(lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q)), Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x), lock x]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
15

ExeStack: stack=[unlock x]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
16

ExeStack: stack=[(lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
17

ExeStack: stack=[(lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x), lock x]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
15

ExeStack: stack=[unlock x]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
16

ExeStack: stack=[(lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
17

ExeStack: stack=[(lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))), no operation]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x)]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
15

ExeStack: stack=[]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
16

ExeStack: stack=[(HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q), lock q]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
17

ExeStack: stack=[(HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q), lock q]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))), no operation]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x)]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
15

ExeStack: stack=[]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
16

ExeStack: stack=[(HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q), lock q]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
17

ExeStack: stack=[(HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q), lock q]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[unlock x, HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10}]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
16

ExeStack: stack=[(HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q)]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
17

ExeStack: stack=[(HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q), lock q]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[unlock x, HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10}]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
16

ExeStack: stack=[(HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q)]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
17

ExeStack: stack=[(HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q), lock q]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))), no operation]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[unlock x]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=30}, newFree=3}
-------------------------
16

ExeStack: stack=[unlock q, HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10}]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=30}, newFree=3}
-------------------------
17

ExeStack: stack=[(HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q), lock q]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))), no operation]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[unlock x]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=30}, newFree=3}
-------------------------
16

ExeStack: stack=[unlock q, HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10}]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=30}, newFree=3}
-------------------------
17

ExeStack: stack=[(HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q), lock q]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=300}, newFree=3}
-------------------------
14

ExeStack: stack=[]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=300}, newFree=3}
-------------------------
16

ExeStack: stack=[unlock q]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=300}, newFree=3}
-------------------------
17

ExeStack: stack=[(HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q), lock q]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=300}, newFree=3}
-------------------------
13

ExeStack: stack=[(no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=300}, newFree=3}
-------------------------
14

ExeStack: stack=[]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=300}, newFree=3}
-------------------------
16

ExeStack: stack=[unlock q]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=300}, newFree=3}
-------------------------
17

ExeStack: stack=[(HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q), lock q]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=300}, newFree=3}
-------------------------
13

ExeStack: stack=[(lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))), no operation]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=300}, newFree=3}
-------------------------
16

ExeStack: stack=[]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=300}, newFree=3}
-------------------------
17

ExeStack: stack=[(HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q), lock q]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=300}, newFree=3}
-------------------------
13

ExeStack: stack=[(lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))), no operation]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=300}, newFree=3}
-------------------------
16

ExeStack: stack=[]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=300}, newFree=3}
-------------------------
17

ExeStack: stack=[(HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q), lock q]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=300}, newFree=3}
-------------------------
13

ExeStack: stack=[(lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=300}, newFree=3}
-------------------------
17

ExeStack: stack=[(HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=300}, newFree=3}
-------------------------
13

ExeStack: stack=[(lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=300}, newFree=3}
-------------------------
17

ExeStack: stack=[(HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=300}, newFree=3}
-------------------------
13

ExeStack: stack=[(print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))), lock x]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=300}, newFree=3}
-------------------------
17

ExeStack: stack=[unlock q, HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5}]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=300}, newFree=3}
-------------------------
13

ExeStack: stack=[(print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))), lock x]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=300}, newFree=3}
-------------------------
17

ExeStack: stack=[unlock q, HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5}]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=300}, newFree=3}
-------------------------
13

ExeStack: stack=[(print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=305}, newFree=3}
-------------------------
17

ExeStack: stack=[unlock q]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=305}, newFree=3}
-------------------------
13

ExeStack: stack=[(print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=305}, newFree=3}
-------------------------
17

ExeStack: stack=[unlock q]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=305}, newFree=3}
-------------------------
13

ExeStack: stack=[(unlock x (lock q (print(RHExp{expression=v2}) unlock q))), print(RHExp{expression=v1})]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=305}, newFree=3}
-------------------------
17

ExeStack: stack=[]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=305}, newFree=3}
-------------------------
13

ExeStack: stack=[(unlock x (lock q (print(RHExp{expression=v2}) unlock q))), print(RHExp{expression=v1})]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=305}, newFree=3}
-------------------------
17

ExeStack: stack=[]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=305}, newFree=3}
-------------------------
13

ExeStack: stack=[(unlock x (lock q (print(RHExp{expression=v2}) unlock q)))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[190]
FileTable: []
Heap: MyHeap{heap={1=190, 2=305}, newFree=3}
-------------------------
13

ExeStack: stack=[(unlock x (lock q (print(RHExp{expression=v2}) unlock q)))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[190]
FileTable: []
Heap: MyHeap{heap={1=190, 2=305}, newFree=3}
-------------------------
13

ExeStack: stack=[(lock q (print(RHExp{expression=v2}) unlock q)), unlock x]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[190]
FileTable: []
Heap: MyHeap{heap={1=190, 2=305}, newFree=3}
-------------------------
13

ExeStack: stack=[(lock q (print(RHExp{expression=v2}) unlock q)), unlock x]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[190]
FileTable: []
Heap: MyHeap{heap={1=190, 2=305}, newFree=3}
-------------------------
13

ExeStack: stack=[(lock q (print(RHExp{expression=v2}) unlock q))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[190]
FileTable: []
Heap: MyHeap{heap={1=190, 2=305}, newFree=3}
-------------------------
13

ExeStack: stack=[(lock q (print(RHExp{expression=v2}) unlock q))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[190]
FileTable: []
Heap: MyHeap{heap={1=190, 2=305}, newFree=3}
-------------------------
13

ExeStack: stack=[(print(RHExp{expression=v2}) unlock q), lock q]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[190]
FileTable: []
Heap: MyHeap{heap={1=190, 2=305}, newFree=3}
-------------------------
13

ExeStack: stack=[(print(RHExp{expression=v2}) unlock q), lock q]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[190]
FileTable: []
Heap: MyHeap{heap={1=190, 2=305}, newFree=3}
-------------------------
13

ExeStack: stack=[(print(RHExp{expression=v2}) unlock q)]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[190]
FileTable: []
Heap: MyHeap{heap={1=190, 2=305}, newFree=3}
-------------------------
13

ExeStack: stack=[(print(RHExp{expression=v2}) unlock q)]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[190]
FileTable: []
Heap: MyHeap{heap={1=190, 2=305}, newFree=3}
-------------------------
13

ExeStack: stack=[unlock q, print(RHExp{expression=v2})]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[190]
FileTable: []
Heap: MyHeap{heap={1=190, 2=305}, newFree=3}
-------------------------
13

ExeStack: stack=[unlock q, print(RHExp{expression=v2})]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[190]
FileTable: []
Heap: MyHeap{heap={1=190, 2=305}, newFree=3}
-------------------------
13

ExeStack: stack=[unlock q]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[190, 305]
FileTable: []
Heap: MyHeap{heap={1=190, 2=305}, newFree=3}
-------------------------
13

ExeStack: stack=[unlock q]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[190, 305]
FileTable: []
Heap: MyHeap{heap={1=190, 2=305}, newFree=3}
-------------------------
13

ExeStack: stack=[]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[190, 305]
FileTable: []
Heap: MyHeap{heap={1=190, 2=305}, newFree=3}
-------------------------
13

ExeStack: stack=[]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[190, 305]
FileTable: []
Heap: MyHeap{heap={1=190, 2=305}, newFree=3}
-------------------------
13

ExeStack: stack=[(Ref(int) v2; (int x; (int q; (HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))))))))), Ref(int) v1;]
SymTable: dictionary={}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(Ref(int) v2; (int x; (int q; (HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))))))))), Ref(int) v1;]
SymTable: dictionary={}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(Ref(int) v2; (int x; (int q; (HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))))))))))]
SymTable: dictionary={v1=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(Ref(int) v2; (int x; (int q; (HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))))))))))]
SymTable: dictionary={v1=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(int x; (int q; (HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))))))))), Ref(int) v2;]
SymTable: dictionary={v1=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(int x; (int q; (HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))))))))), Ref(int) v2;]
SymTable: dictionary={v1=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(int x; (int q; (HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))))))))]
SymTable: dictionary={v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(int x; (int q; (HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))))))))]
SymTable: dictionary={v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(int q; (HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))))))), int x;]
SymTable: dictionary={v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(int q; (HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))))))), int x;]
SymTable: dictionary={v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(int q; (HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))))))))]
SymTable: dictionary={x=0, v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(int q; (HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))))))))]
SymTable: dictionary={x=0, v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))))))), int q;]
SymTable: dictionary={x=0, v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))))))), int q;]
SymTable: dictionary={x=0, v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))))))]
SymTable: dictionary={q=0, x=0, v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))))))]
SymTable: dictionary={q=0, x=0, v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))))), HeapAllocStmt{id='v1', expression=20}]
SymTable: dictionary={q=0, x=0, v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))))), HeapAllocStmt{id='v1', expression=20}]
SymTable: dictionary={q=0, x=0, v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))))))]
SymTable: dictionary={q=0, x=0, v1=RefValue(1int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20}, newFree=2}
-------------------------
13

ExeStack: stack=[(HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))))))]
SymTable: dictionary={q=0, x=0, v1=RefValue(1int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20}, newFree=2}
-------------------------
13

ExeStack: stack=[(newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))))), HeapAllocStmt{id='v2', expression=30}]
SymTable: dictionary={q=0, x=0, v1=RefValue(1int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20}, newFree=2}
-------------------------
13

ExeStack: stack=[(newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))))), HeapAllocStmt{id='v2', expression=30}]
SymTable: dictionary={q=0, x=0, v1=RefValue(1int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20}, newFree=2}
-------------------------
13

ExeStack: stack=[(newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))))]
SymTable: dictionary={q=0, x=0, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))))]
SymTable: dictionary={q=0, x=0, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))), newlock x]
SymTable: dictionary={q=0, x=0, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))), newlock x]
SymTable: dictionary={q=0, x=0, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))))]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))))]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))), Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x)))]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))), Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x)))]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x)))]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x)))]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))), newlock q]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x)), Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x))]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))), newlock q]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x)), Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x))]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
15

ExeStack: stack=[(lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x))]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
15

ExeStack: stack=[(lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x))]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))), Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q)))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x), lock x]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
15

ExeStack: stack=[(HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x), lock x]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))), Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q)))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x), lock x]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
15

ExeStack: stack=[(HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x), lock x]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x), lock x]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
15

ExeStack: stack=[(HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
16

ExeStack: stack=[(Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q)))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x), lock x]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
15

ExeStack: stack=[(HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
16

ExeStack: stack=[(Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q)))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))), no operation]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x), lock x]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
15

ExeStack: stack=[unlock x, HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1}]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
16

ExeStack: stack=[(lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q)), Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))), no operation]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x), lock x]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
15

ExeStack: stack=[unlock x, HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1}]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
16

ExeStack: stack=[(lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q)), Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x), lock x]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
15

ExeStack: stack=[unlock x]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
16

ExeStack: stack=[(lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
17

ExeStack: stack=[(lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x), lock x]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
15

ExeStack: stack=[unlock x]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
16

ExeStack: stack=[(lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
17

ExeStack: stack=[(lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))), no operation]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x)]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
15

ExeStack: stack=[]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
16

ExeStack: stack=[(HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q), lock q]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
17

ExeStack: stack=[(HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q), lock q]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))), no operation]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x)]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
15

ExeStack: stack=[]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
16

ExeStack: stack=[(HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q), lock q]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
17

ExeStack: stack=[(HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q), lock q]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[unlock x, HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10}]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
16

ExeStack: stack=[(HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q)]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
17

ExeStack: stack=[(HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q), lock q]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[unlock x, HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10}]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
16

ExeStack: stack=[(HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q)]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
17

ExeStack: stack=[(HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q), lock q]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))), no operation]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[unlock x]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=30}, newFree=3}
-------------------------
16

ExeStack: stack=[unlock q, HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10}]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=30}, newFree=3}
-------------------------
17

ExeStack: stack=[(HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q), lock q]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))), no operation]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[unlock x]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=30}, newFree=3}
-------------------------
16

ExeStack: stack=[unlock q, HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10}]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=30}, newFree=3}
-------------------------
17

ExeStack: stack=[(HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q), lock q]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=300}, newFree=3}
-------------------------
14

ExeStack: stack=[]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=300}, newFree=3}
-------------------------
16

ExeStack: stack=[unlock q]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=300}, newFree=3}
-------------------------
17

ExeStack: stack=[(HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q), lock q]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=300}, newFree=3}
-------------------------
13

ExeStack: stack=[(no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=300}, newFree=3}
-------------------------
14

ExeStack: stack=[]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=300}, newFree=3}
-------------------------
16

ExeStack: stack=[unlock q]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=300}, newFree=3}
-------------------------
17

ExeStack: stack=[(HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q), lock q]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=300}, newFree=3}
-------------------------
13

ExeStack: stack=[(lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))), no operation]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=300}, newFree=3}
-------------------------
16

ExeStack: stack=[]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=300}, newFree=3}
-------------------------
17

ExeStack: stack=[(HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q), lock q]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=300}, newFree=3}
-------------------------
13

ExeStack: stack=[(lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))), no operation]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=300}, newFree=3}
-------------------------
16

ExeStack: stack=[]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=300}, newFree=3}
-------------------------
17

ExeStack: stack=[(HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q), lock q]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=300}, newFree=3}
-------------------------
13

ExeStack: stack=[(lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=300}, newFree=3}
-------------------------
17

ExeStack: stack=[(HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=300}, newFree=3}
-------------------------
13

ExeStack: stack=[(lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=300}, newFree=3}
-------------------------
17

ExeStack: stack=[(HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=300}, newFree=3}
-------------------------
13

ExeStack: stack=[(print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))), lock x]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=300}, newFree=3}
-------------------------
17

ExeStack: stack=[unlock q, HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5}]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=300}, newFree=3}
-------------------------
13

ExeStack: stack=[(print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))), lock x]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=300}, newFree=3}
-------------------------
17

ExeStack: stack=[unlock q, HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5}]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=300}, newFree=3}
-------------------------
13

ExeStack: stack=[(print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=305}, newFree=3}
-------------------------
17

ExeStack: stack=[unlock q]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=305}, newFree=3}
-------------------------
13

ExeStack: stack=[(print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=305}, newFree=3}
-------------------------
17

ExeStack: stack=[unlock q]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=305}, newFree=3}
-------------------------
13

ExeStack: stack=[(unlock x (lock q (print(RHExp{expression=v2}) unlock q))), print(RHExp{expression=v1})]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=305}, newFree=3}
-------------------------
17

ExeStack: stack=[]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=305}, newFree=3}
-------------------------
13

ExeStack: stack=[(unlock x (lock q (print(RHExp{expression=v2}) unlock q))), print(RHExp{expression=v1})]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=305}, newFree=3}
-------------------------
17

ExeStack: stack=[]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=305}, newFree=3}
-------------------------
13

ExeStack: stack=[(unlock x (lock q (print(RHExp{expression=v2}) unlock q)))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[190]
FileTable: []
Heap: MyHeap{heap={1=190, 2=305}, newFree=3}
-------------------------
13

ExeStack: stack=[(unlock x (lock q (print(RHExp{expression=v2}) unlock q)))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[190]
FileTable: []
Heap: MyHeap{heap={1=190, 2=305}, newFree=3}
-------------------------
13

ExeStack: stack=[(lock q (print(RHExp{expression=v2}) unlock q)), unlock x]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[190]
FileTable: []
Heap: MyHeap{heap={1=190, 2=305}, newFree=3}
-------------------------
13

ExeStack: stack=[(lock q (print(RHExp{expression=v2}) unlock q)), unlock x]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[190]
FileTable: []
Heap: MyHeap{heap={1=190, 2=305}, newFree=3}
-------------------------
13

ExeStack: stack=[(lock q (print(RHExp{expression=v2}) unlock q))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[190]
FileTable: []
Heap: MyHeap{heap={1=190, 2=305}, newFree=3}
-------------------------
13

ExeStack: stack=[(lock q (print(RHExp{expression=v2}) unlock q))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[190]
FileTable: []
Heap: MyHeap{heap={1=190, 2=305}, newFree=3}
-------------------------
13

ExeStack: stack=[(print(RHExp{expression=v2}) unlock q), lock q]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[190]
FileTable: []
Heap: MyHeap{heap={1=190, 2=305}, newFree=3}
-------------------------
13

ExeStack: stack=[(print(RHExp{expression=v2}) unlock q), lock q]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[190]
FileTable: []
Heap: MyHeap{heap={1=190, 2=305}, newFree=3}
-------------------------
13

ExeStack: stack=[(print(RHExp{expression=v2}) unlock q)]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[190]
FileTable: []
Heap: MyHeap{heap={1=190, 2=305}, newFree=3}
-------------------------
13

ExeStack: stack=[(print(RHExp{expression=v2}) unlock q)]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[190]
FileTable: []
Heap: MyHeap{heap={1=190, 2=305}, newFree=3}
-------------------------
13

ExeStack: stack=[unlock q, print(RHExp{expression=v2})]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[190]
FileTable: []
Heap: MyHeap{heap={1=190, 2=305}, newFree=3}
-------------------------
13

ExeStack: stack=[unlock q, print(RHExp{expression=v2})]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[190]
FileTable: []
Heap: MyHeap{heap={1=190, 2=305}, newFree=3}
-------------------------
13

ExeStack: stack=[unlock q]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[190, 305]
FileTable: []
Heap: MyHeap{heap={1=190, 2=305}, newFree=3}
-------------------------
13

ExeStack: stack=[unlock q]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[190, 305]
FileTable: []
Heap: MyHeap{heap={1=190, 2=305}, newFree=3}
-------------------------
13

ExeStack: stack=[]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[190, 305]
FileTable: []
Heap: MyHeap{heap={1=190, 2=305}, newFree=3}
-------------------------
13

ExeStack: stack=[]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[190, 305]
FileTable: []
Heap: MyHeap{heap={1=190, 2=305}, newFree=3}
-------------------------
13

ExeStack: stack=[(Ref(int) v2; (int x; (int q; (HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))))))))), Ref(int) v1;]
SymTable: dictionary={}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(Ref(int) v2; (int x; (int q; (HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))))))))), Ref(int) v1;]
SymTable: dictionary={}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(Ref(int) v2; (int x; (int q; (HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))))))))))]
SymTable: dictionary={v1=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(Ref(int) v2; (int x; (int q; (HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))))))))))]
SymTable: dictionary={v1=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(int x; (int q; (HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))))))))), Ref(int) v2;]
SymTable: dictionary={v1=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(int x; (int q; (HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))))))))), Ref(int) v2;]
SymTable: dictionary={v1=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(int x; (int q; (HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))))))))]
SymTable: dictionary={v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(int x; (int q; (HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))))))))]
SymTable: dictionary={v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(int q; (HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))))))), int x;]
SymTable: dictionary={v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(int q; (HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))))))), int x;]
SymTable: dictionary={v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(int q; (HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))))))))]
SymTable: dictionary={x=0, v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(int q; (HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))))))))]
SymTable: dictionary={x=0, v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))))))), int q;]
SymTable: dictionary={x=0, v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))))))), int q;]
SymTable: dictionary={x=0, v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))))))]
SymTable: dictionary={q=0, x=0, v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))))))]
SymTable: dictionary={q=0, x=0, v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))))), HeapAllocStmt{id='v1', expression=20}]
SymTable: dictionary={q=0, x=0, v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))))), HeapAllocStmt{id='v1', expression=20}]
SymTable: dictionary={q=0, x=0, v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))))))]
SymTable: dictionary={q=0, x=0, v1=RefValue(1int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20}, newFree=2}
-------------------------
13

ExeStack: stack=[(HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))))))]
SymTable: dictionary={q=0, x=0, v1=RefValue(1int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20}, newFree=2}
-------------------------
13

ExeStack: stack=[(newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))))), HeapAllocStmt{id='v2', expression=30}]
SymTable: dictionary={q=0, x=0, v1=RefValue(1int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20}, newFree=2}
-------------------------
13

ExeStack: stack=[(newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))))), HeapAllocStmt{id='v2', expression=30}]
SymTable: dictionary={q=0, x=0, v1=RefValue(1int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20}, newFree=2}
-------------------------
13

ExeStack: stack=[(newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))))]
SymTable: dictionary={q=0, x=0, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))))]
SymTable: dictionary={q=0, x=0, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))), newlock x]
SymTable: dictionary={q=0, x=0, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))), newlock x]
SymTable: dictionary={q=0, x=0, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))))]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))))]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))), Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x)))]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))), Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x)))]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x)))]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x)))]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))), newlock q]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x)), Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x))]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))), newlock q]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x)), Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x))]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
15

ExeStack: stack=[(lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x))]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
15

ExeStack: stack=[(lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x))]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))), Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q)))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x), lock x]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
15

ExeStack: stack=[(HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x), lock x]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))), Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q)))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x), lock x]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
15

ExeStack: stack=[(HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x), lock x]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x), lock x]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
15

ExeStack: stack=[(HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
16

ExeStack: stack=[(Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q)))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x), lock x]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
15

ExeStack: stack=[(HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
16

ExeStack: stack=[(Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q)))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))), no operation]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x), lock x]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
15

ExeStack: stack=[unlock x, HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1}]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
16

ExeStack: stack=[(lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q)), Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))), no operation]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x), lock x]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
15

ExeStack: stack=[unlock x, HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1}]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
16

ExeStack: stack=[(lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q)), Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x), lock x]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
15

ExeStack: stack=[unlock x]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
16

ExeStack: stack=[(lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
17

ExeStack: stack=[(lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x), lock x]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
15

ExeStack: stack=[unlock x]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
16

ExeStack: stack=[(lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
17

ExeStack: stack=[(lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))), no operation]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x)]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
15

ExeStack: stack=[]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
16

ExeStack: stack=[(HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q), lock q]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
17

ExeStack: stack=[(HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q), lock q]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))), no operation]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x)]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
15

ExeStack: stack=[]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
16

ExeStack: stack=[(HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q), lock q]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
17

ExeStack: stack=[(HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q), lock q]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[unlock x, HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10}]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
16

ExeStack: stack=[(HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q)]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
17

ExeStack: stack=[(HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q), lock q]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[unlock x, HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10}]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
16

ExeStack: stack=[(HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q)]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
17

ExeStack: stack=[(HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q), lock q]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))), no operation]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[unlock x]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=30}, newFree=3}
-------------------------
16

ExeStack: stack=[unlock q, HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10}]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=30}, newFree=3}
-------------------------
17

ExeStack: stack=[(HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q), lock q]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))), no operation]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[unlock x]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=30}, newFree=3}
-------------------------
16

ExeStack: stack=[unlock q, HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10}]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=30}, newFree=3}
-------------------------
17

ExeStack: stack=[(HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q), lock q]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=300}, newFree=3}
-------------------------
14

ExeStack: stack=[]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=300}, newFree=3}
-------------------------
16

ExeStack: stack=[unlock q]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=300}, newFree=3}
-------------------------
17

ExeStack: stack=[(HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q), lock q]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=300}, newFree=3}
-------------------------
13

ExeStack: stack=[(no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=300}, newFree=3}
-------------------------
14

ExeStack: stack=[]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=300}, newFree=3}
-------------------------
16

ExeStack: stack=[unlock q]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=300}, newFree=3}
-------------------------
17

ExeStack: stack=[(HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q), lock q]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=300}, newFree=3}
-------------------------
13

ExeStack: stack=[(lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))), no operation]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=300}, newFree=3}
-------------------------
16

ExeStack: stack=[]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=300}, newFree=3}
-------------------------
17

ExeStack: stack=[(HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q), lock q]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=300}, newFree=3}
-------------------------
13

ExeStack: stack=[(lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))), no operation]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=300}, newFree=3}
-------------------------
16

ExeStack: stack=[]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=300}, newFree=3}
-------------------------
17

ExeStack: stack=[(HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q), lock q]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=300}, newFree=3}
-------------------------
13

ExeStack: stack=[(lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=300}, newFree=3}
-------------------------
17

ExeStack: stack=[(HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=300}, newFree=3}
-------------------------
13

ExeStack: stack=[(lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=300}, newFree=3}
-------------------------
17

ExeStack: stack=[(HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=300}, newFree=3}
-------------------------
13

ExeStack: stack=[(print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))), lock x]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=300}, newFree=3}
-------------------------
17

ExeStack: stack=[unlock q, HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5}]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=300}, newFree=3}
-------------------------
13

ExeStack: stack=[(print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))), lock x]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=300}, newFree=3}
-------------------------
17

ExeStack: stack=[unlock q, HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5}]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=300}, newFree=3}
-------------------------
13

ExeStack: stack=[(print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=305}, newFree=3}
-------------------------
17

ExeStack: stack=[unlock q]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=305}, newFree=3}
-------------------------
13

ExeStack: stack=[(print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=305}, newFree=3}
-------------------------
17

ExeStack: stack=[unlock q]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=305}, newFree=3}
-------------------------
13

ExeStack: stack=[(unlock x (lock q (print(RHExp{expression=v2}) unlock q))), print(RHExp{expression=v1})]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=305}, newFree=3}
-------------------------
17

ExeStack: stack=[]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=305}, newFree=3}
-------------------------
13

ExeStack: stack=[(unlock x (lock q (print(RHExp{expression=v2}) unlock q))), print(RHExp{expression=v1})]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=305}, newFree=3}
-------------------------
17

ExeStack: stack=[]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=305}, newFree=3}
-------------------------
13

ExeStack: stack=[(unlock x (lock q (print(RHExp{expression=v2}) unlock q)))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[190]
FileTable: []
Heap: MyHeap{heap={1=190, 2=305}, newFree=3}
-------------------------
13

ExeStack: stack=[(unlock x (lock q (print(RHExp{expression=v2}) unlock q)))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[190]
FileTable: []
Heap: MyHeap{heap={1=190, 2=305}, newFree=3}
-------------------------
13

ExeStack: stack=[(lock q (print(RHExp{expression=v2}) unlock q)), unlock x]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[190]
FileTable: []
Heap: MyHeap{heap={1=190, 2=305}, newFree=3}
-------------------------
13

ExeStack: stack=[(lock q (print(RHExp{expression=v2}) unlock q)), unlock x]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[190]
FileTable: []
Heap: MyHeap{heap={1=190, 2=305}, newFree=3}
-------------------------
13

ExeStack: stack=[(lock q (print(RHExp{expression=v2}) unlock q))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[190]
FileTable: []
Heap: MyHeap{heap={1=190, 2=305}, newFree=3}
-------------------------
13

ExeStack: stack=[(lock q (print(RHExp{expression=v2}) unlock q))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[190]
FileTable: []
Heap: MyHeap{heap={1=190, 2=305}, newFree=3}
-------------------------
13

ExeStack: stack=[(print(RHExp{expression=v2}) unlock q), lock q]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[190]
FileTable: []
Heap: MyHeap{heap={1=190, 2=305}, newFree=3}
-------------------------
13

ExeStack: stack=[(print(RHExp{expression=v2}) unlock q), lock q]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[190]
FileTable: []
Heap: MyHeap{heap={1=190, 2=305}, newFree=3}
-------------------------
13

ExeStack: stack=[(print(RHExp{expression=v2}) unlock q)]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[190]
FileTable: []
Heap: MyHeap{heap={1=190, 2=305}, newFree=3}
-------------------------
13

ExeStack: stack=[(print(RHExp{expression=v2}) unlock q)]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[190]
FileTable: []
Heap: MyHeap{heap={1=190, 2=305}, newFree=3}
-------------------------
13

ExeStack: stack=[unlock q, print(RHExp{expression=v2})]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[190]
FileTable: []
Heap: MyHeap{heap={1=190, 2=305}, newFree=3}
-------------------------
13

ExeStack: stack=[unlock q, print(RHExp{expression=v2})]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[190]
FileTable: []
Heap: MyHeap{heap={1=190, 2=305}, newFree=3}
-------------------------
13

ExeStack: stack=[unlock q]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[190, 305]
FileTable: []
Heap: MyHeap{heap={1=190, 2=305}, newFree=3}
-------------------------
13

ExeStack: stack=[unlock q]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[190, 305]
FileTable: []
Heap: MyHeap{heap={1=190, 2=305}, newFree=3}
-------------------------
13

ExeStack: stack=[]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[190, 305]
FileTable: []
Heap: MyHeap{heap={1=190, 2=305}, newFree=3}
-------------------------
13

ExeStack: stack=[]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[190, 305]
FileTable: []
Heap: MyHeap{heap={1=190, 2=305}, newFree=3}
-------------------------
13

ExeStack: stack=[(Ref(int) v2; (int x; (int q; (HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))))))))), Ref(int) v1;]
SymTable: dictionary={}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(Ref(int) v2; (int x; (int q; (HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))))))))), Ref(int) v1;]
SymTable: dictionary={}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(Ref(int) v2; (int x; (int q; (HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))))))))))]
SymTable: dictionary={v1=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(Ref(int) v2; (int x; (int q; (HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))))))))))]
SymTable: dictionary={v1=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(int x; (int q; (HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))))))))), Ref(int) v2;]
SymTable: dictionary={v1=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(int x; (int q; (HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))))))))), Ref(int) v2;]
SymTable: dictionary={v1=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(int x; (int q; (HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))))))))]
SymTable: dictionary={v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(int x; (int q; (HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))))))))]
SymTable: dictionary={v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(int q; (HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))))))), int x;]
SymTable: dictionary={v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(int q; (HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))))))), int x;]
SymTable: dictionary={v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(int q; (HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))))))))]
SymTable: dictionary={x=0, v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(int q; (HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))))))))]
SymTable: dictionary={x=0, v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))))))), int q;]
SymTable: dictionary={x=0, v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))))))), int q;]
SymTable: dictionary={x=0, v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))))))]
SymTable: dictionary={q=0, x=0, v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))))))]
SymTable: dictionary={q=0, x=0, v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))))), HeapAllocStmt{id='v1', expression=20}]
SymTable: dictionary={q=0, x=0, v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))))), HeapAllocStmt{id='v1', expression=20}]
SymTable: dictionary={q=0, x=0, v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))))))]
SymTable: dictionary={q=0, x=0, v1=RefValue(1int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20}, newFree=2}
-------------------------
13

ExeStack: stack=[(HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))))))]
SymTable: dictionary={q=0, x=0, v1=RefValue(1int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20}, newFree=2}
-------------------------
13

ExeStack: stack=[(newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))))), HeapAllocStmt{id='v2', expression=30}]
SymTable: dictionary={q=0, x=0, v1=RefValue(1int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20}, newFree=2}
-------------------------
13

ExeStack: stack=[(newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))))), HeapAllocStmt{id='v2', expression=30}]
SymTable: dictionary={q=0, x=0, v1=RefValue(1int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20}, newFree=2}
-------------------------
13

ExeStack: stack=[(newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))))]
SymTable: dictionary={q=0, x=0, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))))]
SymTable: dictionary={q=0, x=0, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))), newlock x]
SymTable: dictionary={q=0, x=0, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))), newlock x]
SymTable: dictionary={q=0, x=0, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))))]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))))]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))), Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x)))]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))), Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x)))]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x)))]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x)))]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))), newlock q]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x)), Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x))]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))), newlock q]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x)), Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x))]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
15

ExeStack: stack=[(lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x))]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
15

ExeStack: stack=[(lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x))]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))), Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q)))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x), lock x]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
15

ExeStack: stack=[(HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x), lock x]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))), Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q)))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x), lock x]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
15

ExeStack: stack=[(HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x), lock x]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x), lock x]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
15

ExeStack: stack=[(HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
16

ExeStack: stack=[(Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q)))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x), lock x]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
15

ExeStack: stack=[(HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
16

ExeStack: stack=[(Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q)))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))), no operation]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x), lock x]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
15

ExeStack: stack=[unlock x, HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1}]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
16

ExeStack: stack=[(lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q)), Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))), no operation]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x), lock x]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
15

ExeStack: stack=[unlock x, HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1}]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
16

ExeStack: stack=[(lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q)), Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x), lock x]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
15

ExeStack: stack=[unlock x]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
16

ExeStack: stack=[(lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
17

ExeStack: stack=[(lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x), lock x]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
15

ExeStack: stack=[unlock x]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
16

ExeStack: stack=[(lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
17

ExeStack: stack=[(lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))), no operation]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x)]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
15

ExeStack: stack=[]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
16

ExeStack: stack=[(HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q), lock q]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
17

ExeStack: stack=[(HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q), lock q]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))), no operation]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x)]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
15

ExeStack: stack=[]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
16

ExeStack: stack=[(HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q), lock q]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
17

ExeStack: stack=[(HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q), lock q]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[unlock x, HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10}]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
16

ExeStack: stack=[(HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q)]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
17

ExeStack: stack=[(HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q), lock q]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[unlock x, HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10}]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
16

ExeStack: stack=[(HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q)]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
17

ExeStack: stack=[(HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q), lock q]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))), no operation]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[unlock x]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=30}, newFree=3}
-------------------------
16

ExeStack: stack=[unlock q, HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10}]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=30}, newFree=3}
-------------------------
17

ExeStack: stack=[(HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q), lock q]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))), no operation]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[unlock x]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=30}, newFree=3}
-------------------------
16

ExeStack: stack=[unlock q, HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10}]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=30}, newFree=3}
-------------------------
17

ExeStack: stack=[(HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q), lock q]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=300}, newFree=3}
-------------------------
14

ExeStack: stack=[]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=300}, newFree=3}
-------------------------
16

ExeStack: stack=[unlock q]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=300}, newFree=3}
-------------------------
17

ExeStack: stack=[(HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q), lock q]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=300}, newFree=3}
-------------------------
13

ExeStack: stack=[(no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=300}, newFree=3}
-------------------------
14

ExeStack: stack=[]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=300}, newFree=3}
-------------------------
16

ExeStack: stack=[unlock q]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=300}, newFree=3}
-------------------------
17

ExeStack: stack=[(HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q), lock q]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=300}, newFree=3}
-------------------------
13

ExeStack: stack=[(lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))), no operation]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=300}, newFree=3}
-------------------------
16

ExeStack: stack=[]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=300}, newFree=3}
-------------------------
17

ExeStack: stack=[(HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q), lock q]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=300}, newFree=3}
-------------------------
13

ExeStack: stack=[(lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))), no operation]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=300}, newFree=3}
-------------------------
16

ExeStack: stack=[]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=300}, newFree=3}
-------------------------
17

ExeStack: stack=[(HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q), lock q]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=300}, newFree=3}
-------------------------
13

ExeStack: stack=[(lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=300}, newFree=3}
-------------------------
17

ExeStack: stack=[(HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=300}, newFree=3}
-------------------------
13

ExeStack: stack=[(lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=300}, newFree=3}
-------------------------
17

ExeStack: stack=[(HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=300}, newFree=3}
-------------------------
13

ExeStack: stack=[(print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))), lock x]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=300}, newFree=3}
-------------------------
17

ExeStack: stack=[unlock q, HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5}]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=300}, newFree=3}
-------------------------
13

ExeStack: stack=[(print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))), lock x]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=300}, newFree=3}
-------------------------
17

ExeStack: stack=[unlock q, HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5}]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=300}, newFree=3}
-------------------------
13

ExeStack: stack=[(print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=305}, newFree=3}
-------------------------
17

ExeStack: stack=[unlock q]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=305}, newFree=3}
-------------------------
13

ExeStack: stack=[(print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=305}, newFree=3}
-------------------------
17

ExeStack: stack=[unlock q]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=305}, newFree=3}
-------------------------
13

ExeStack: stack=[(unlock x (lock q (print(RHExp{expression=v2}) unlock q))), print(RHExp{expression=v1})]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=305}, newFree=3}
-------------------------
17

ExeStack: stack=[]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=305}, newFree=3}
-------------------------
13

ExeStack: stack=[(unlock x (lock q (print(RHExp{expression=v2}) unlock q))), print(RHExp{expression=v1})]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=305}, newFree=3}
-------------------------
17

ExeStack: stack=[]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=305}, newFree=3}
-------------------------
13

ExeStack: stack=[(unlock x (lock q (print(RHExp{expression=v2}) unlock q)))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[190]
FileTable: []
Heap: MyHeap{heap={1=190, 2=305}, newFree=3}
-------------------------
13

ExeStack: stack=[(unlock x (lock q (print(RHExp{expression=v2}) unlock q)))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[190]
FileTable: []
Heap: MyHeap{heap={1=190, 2=305}, newFree=3}
-------------------------
13

ExeStack: stack=[(lock q (print(RHExp{expression=v2}) unlock q)), unlock x]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[190]
FileTable: []
Heap: MyHeap{heap={1=190, 2=305}, newFree=3}
-------------------------
13

ExeStack: stack=[(lock q (print(RHExp{expression=v2}) unlock q)), unlock x]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[190]
FileTable: []
Heap: MyHeap{heap={1=190, 2=305}, newFree=3}
-------------------------
13

ExeStack: stack=[(lock q (print(RHExp{expression=v2}) unlock q))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[190]
FileTable: []
Heap: MyHeap{heap={1=190, 2=305}, newFree=3}
-------------------------
13

ExeStack: stack=[(lock q (print(RHExp{expression=v2}) unlock q))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[190]
FileTable: []
Heap: MyHeap{heap={1=190, 2=305}, newFree=3}
-------------------------
13

ExeStack: stack=[(print(RHExp{expression=v2}) unlock q), lock q]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[190]
FileTable: []
Heap: MyHeap{heap={1=190, 2=305}, newFree=3}
-------------------------
13

ExeStack: stack=[(print(RHExp{expression=v2}) unlock q), lock q]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[190]
FileTable: []
Heap: MyHeap{heap={1=190, 2=305}, newFree=3}
-------------------------
13

ExeStack: stack=[(print(RHExp{expression=v2}) unlock q)]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[190]
FileTable: []
Heap: MyHeap{heap={1=190, 2=305}, newFree=3}
-------------------------
13

ExeStack: stack=[(print(RHExp{expression=v2}) unlock q)]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[190]
FileTable: []
Heap: MyHeap{heap={1=190, 2=305}, newFree=3}
-------------------------
13

ExeStack: stack=[unlock q, print(RHExp{expression=v2})]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[190]
FileTable: []
Heap: MyHeap{heap={1=190, 2=305}, newFree=3}
-------------------------
13

ExeStack: stack=[unlock q, print(RHExp{expression=v2})]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[190]
FileTable: []
Heap: MyHeap{heap={1=190, 2=305}, newFree=3}
-------------------------
13

ExeStack: stack=[unlock q]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[190, 305]
FileTable: []
Heap: MyHeap{heap={1=190, 2=305}, newFree=3}
-------------------------
13

ExeStack: stack=[unlock q]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[190, 305]
FileTable: []
Heap: MyHeap{heap={1=190, 2=305}, newFree=3}
-------------------------
13

ExeStack: stack=[]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[190, 305]
FileTable: []
Heap: MyHeap{heap={1=190, 2=305}, newFree=3}
-------------------------
13

ExeStack: stack=[]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[190, 305]
FileTable: []
Heap: MyHeap{heap={1=190, 2=305}, newFree=3}
-------------------------
13

ExeStack: stack=[(Ref(int) v2; (int x; (int q; (HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))))))))), Ref(int) v1;]
SymTable: dictionary={}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(Ref(int) v2; (int x; (int q; (HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))))))))), Ref(int) v1;]
SymTable: dictionary={}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(Ref(int) v2; (int x; (int q; (HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))))))))))]
SymTable: dictionary={v1=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(Ref(int) v2; (int x; (int q; (HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))))))))))]
SymTable: dictionary={v1=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(int x; (int q; (HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))))))))), Ref(int) v2;]
SymTable: dictionary={v1=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(int x; (int q; (HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))))))))), Ref(int) v2;]
SymTable: dictionary={v1=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(int x; (int q; (HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))))))))]
SymTable: dictionary={v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(int x; (int q; (HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))))))))]
SymTable: dictionary={v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(int q; (HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))))))), int x;]
SymTable: dictionary={v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(int q; (HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))))))), int x;]
SymTable: dictionary={v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(int q; (HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))))))))]
SymTable: dictionary={x=0, v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(int q; (HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))))))))]
SymTable: dictionary={x=0, v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))))))), int q;]
SymTable: dictionary={x=0, v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))))))), int q;]
SymTable: dictionary={x=0, v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))))))]
SymTable: dictionary={q=0, x=0, v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))))))]
SymTable: dictionary={q=0, x=0, v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))))), HeapAllocStmt{id='v1', expression=20}]
SymTable: dictionary={q=0, x=0, v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))))), HeapAllocStmt{id='v1', expression=20}]
SymTable: dictionary={q=0, x=0, v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))))))]
SymTable: dictionary={q=0, x=0, v1=RefValue(1int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20}, newFree=2}
-------------------------
13

ExeStack: stack=[(HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))))))]
SymTable: dictionary={q=0, x=0, v1=RefValue(1int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20}, newFree=2}
-------------------------
13

ExeStack: stack=[(newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))))), HeapAllocStmt{id='v2', expression=30}]
SymTable: dictionary={q=0, x=0, v1=RefValue(1int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20}, newFree=2}
-------------------------
13

ExeStack: stack=[(newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))))), HeapAllocStmt{id='v2', expression=30}]
SymTable: dictionary={q=0, x=0, v1=RefValue(1int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20}, newFree=2}
-------------------------
13

ExeStack: stack=[(newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))))]
SymTable: dictionary={q=0, x=0, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))))]
SymTable: dictionary={q=0, x=0, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))), newlock x]
SymTable: dictionary={q=0, x=0, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))), newlock x]
SymTable: dictionary={q=0, x=0, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))))]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))))]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))), Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x)))]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))), Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x)))]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x)))]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x)))]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))), newlock q]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x)), Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x))]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))), newlock q]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x)), Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x))]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
15

ExeStack: stack=[(lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x))]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
15

ExeStack: stack=[(lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x))]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))), Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q)))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x), lock x]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
15

ExeStack: stack=[(HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x), lock x]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))), Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q)))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x), lock x]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
15

ExeStack: stack=[(HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x), lock x]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x), lock x]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
15

ExeStack: stack=[(HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
16

ExeStack: stack=[(Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q)))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x), lock x]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
15

ExeStack: stack=[(HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
16

ExeStack: stack=[(Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q)))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(Ref(int) v2; (int x; (int q; (HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))))))))), Ref(int) v1;]
SymTable: dictionary={}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(Ref(int) v2; (int x; (int q; (HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))))))))), Ref(int) v1;]
SymTable: dictionary={}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(Ref(int) v2; (int x; (int q; (HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))))))))))]
SymTable: dictionary={v1=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(Ref(int) v2; (int x; (int q; (HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))))))))))]
SymTable: dictionary={v1=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(int x; (int q; (HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))))))))), Ref(int) v2;]
SymTable: dictionary={v1=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(int x; (int q; (HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))))))))), Ref(int) v2;]
SymTable: dictionary={v1=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(int x; (int q; (HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))))))))]
SymTable: dictionary={v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(int x; (int q; (HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))))))))]
SymTable: dictionary={v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(int q; (HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))))))), int x;]
SymTable: dictionary={v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(int q; (HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))))))), int x;]
SymTable: dictionary={v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(int q; (HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))))))))]
SymTable: dictionary={x=0, v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(int q; (HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))))))))]
SymTable: dictionary={x=0, v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))))))), int q;]
SymTable: dictionary={x=0, v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))))))), int q;]
SymTable: dictionary={x=0, v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))))))]
SymTable: dictionary={q=0, x=0, v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))))))]
SymTable: dictionary={q=0, x=0, v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))))), HeapAllocStmt{id='v1', expression=20}]
SymTable: dictionary={q=0, x=0, v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))))), HeapAllocStmt{id='v1', expression=20}]
SymTable: dictionary={q=0, x=0, v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))))))]
SymTable: dictionary={q=0, x=0, v1=RefValue(1int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20}, newFree=2}
-------------------------
13

ExeStack: stack=[(HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))))))]
SymTable: dictionary={q=0, x=0, v1=RefValue(1int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20}, newFree=2}
-------------------------
13

ExeStack: stack=[(newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))))), HeapAllocStmt{id='v2', expression=30}]
SymTable: dictionary={q=0, x=0, v1=RefValue(1int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20}, newFree=2}
-------------------------
13

ExeStack: stack=[(newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))))), HeapAllocStmt{id='v2', expression=30}]
SymTable: dictionary={q=0, x=0, v1=RefValue(1int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20}, newFree=2}
-------------------------
13

ExeStack: stack=[(newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))))]
SymTable: dictionary={q=0, x=0, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))))]
SymTable: dictionary={q=0, x=0, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))), newlock x]
SymTable: dictionary={q=0, x=0, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))), newlock x]
SymTable: dictionary={q=0, x=0, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))))]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))))]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(Ref(int) v2; (int x; (int q; (HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))))))))), Ref(int) v1;]
SymTable: dictionary={}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(Ref(int) v2; (int x; (int q; (HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))))))))), Ref(int) v1;]
SymTable: dictionary={}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(Ref(int) v2; (int x; (int q; (HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))))))))))]
SymTable: dictionary={v1=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(Ref(int) v2; (int x; (int q; (HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))))))))))]
SymTable: dictionary={v1=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(int x; (int q; (HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))))))))), Ref(int) v2;]
SymTable: dictionary={v1=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(int x; (int q; (HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))))))))), Ref(int) v2;]
SymTable: dictionary={v1=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(int x; (int q; (HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))))))))]
SymTable: dictionary={v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(int x; (int q; (HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))))))))]
SymTable: dictionary={v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(int q; (HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))))))), int x;]
SymTable: dictionary={v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(int q; (HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))))))), int x;]
SymTable: dictionary={v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(int q; (HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))))))))]
SymTable: dictionary={x=0, v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(int q; (HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))))))))]
SymTable: dictionary={x=0, v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))))))), int q;]
SymTable: dictionary={x=0, v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))))))), int q;]
SymTable: dictionary={x=0, v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))))))]
SymTable: dictionary={q=0, x=0, v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))))))]
SymTable: dictionary={q=0, x=0, v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))))), HeapAllocStmt{id='v1', expression=20}]
SymTable: dictionary={q=0, x=0, v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))))), HeapAllocStmt{id='v1', expression=20}]
SymTable: dictionary={q=0, x=0, v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))))))]
SymTable: dictionary={q=0, x=0, v1=RefValue(1int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20}, newFree=2}
-------------------------
13

ExeStack: stack=[(HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))))))]
SymTable: dictionary={q=0, x=0, v1=RefValue(1int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20}, newFree=2}
-------------------------
13

ExeStack: stack=[(newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))))), HeapAllocStmt{id='v2', expression=30}]
SymTable: dictionary={q=0, x=0, v1=RefValue(1int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20}, newFree=2}
-------------------------
13

ExeStack: stack=[(newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))))), HeapAllocStmt{id='v2', expression=30}]
SymTable: dictionary={q=0, x=0, v1=RefValue(1int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20}, newFree=2}
-------------------------
13

ExeStack: stack=[(newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))))]
SymTable: dictionary={q=0, x=0, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))))]
SymTable: dictionary={q=0, x=0, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))), newlock x]
SymTable: dictionary={q=0, x=0, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))), newlock x]
SymTable: dictionary={q=0, x=0, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))))]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))))]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(Ref(int) v2; (int x; (int q; (HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))))))))), Ref(int) v1;]
SymTable: dictionary={}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(Ref(int) v2; (int x; (int q; (HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))))))))), Ref(int) v1;]
SymTable: dictionary={}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(Ref(int) v2; (int x; (int q; (HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))))))))))]
SymTable: dictionary={v1=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(Ref(int) v2; (int x; (int q; (HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))))))))))]
SymTable: dictionary={v1=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(int x; (int q; (HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))))))))), Ref(int) v2;]
SymTable: dictionary={v1=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(int x; (int q; (HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))))))))), Ref(int) v2;]
SymTable: dictionary={v1=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(int x; (int q; (HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))))))))]
SymTable: dictionary={v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(int x; (int q; (HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))))))))]
SymTable: dictionary={v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(int q; (HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))))))), int x;]
SymTable: dictionary={v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(int q; (HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))))))), int x;]
SymTable: dictionary={v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(int q; (HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))))))))]
SymTable: dictionary={x=0, v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(int q; (HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))))))))]
SymTable: dictionary={x=0, v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))))))), int q;]
SymTable: dictionary={x=0, v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))))))), int q;]
SymTable: dictionary={x=0, v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))))))]
SymTable: dictionary={q=0, x=0, v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))))))]
SymTable: dictionary={q=0, x=0, v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))))), HeapAllocStmt{id='v1', expression=20}]
SymTable: dictionary={q=0, x=0, v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))))), HeapAllocStmt{id='v1', expression=20}]
SymTable: dictionary={q=0, x=0, v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))))))]
SymTable: dictionary={q=0, x=0, v1=RefValue(1int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20}, newFree=2}
-------------------------
13

ExeStack: stack=[(HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))))))]
SymTable: dictionary={q=0, x=0, v1=RefValue(1int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20}, newFree=2}
-------------------------
13

ExeStack: stack=[(newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))))), HeapAllocStmt{id='v2', expression=30}]
SymTable: dictionary={q=0, x=0, v1=RefValue(1int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20}, newFree=2}
-------------------------
13

ExeStack: stack=[(newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))))), HeapAllocStmt{id='v2', expression=30}]
SymTable: dictionary={q=0, x=0, v1=RefValue(1int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20}, newFree=2}
-------------------------
13

ExeStack: stack=[(newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))))]
SymTable: dictionary={q=0, x=0, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))))]
SymTable: dictionary={q=0, x=0, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))), newlock x]
SymTable: dictionary={q=0, x=0, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))), newlock x]
SymTable: dictionary={q=0, x=0, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))))]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))))]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))), Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x)))]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))), Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x)))]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x)))]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x)))]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))), newlock q]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x)), Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x))]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))), newlock q]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x)), Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x))]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
15

ExeStack: stack=[(lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x))]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
15

ExeStack: stack=[(lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x))]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))), Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q)))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x), lock x]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
15

ExeStack: stack=[(HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x), lock x]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))), Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q)))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x), lock x]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
15

ExeStack: stack=[(HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x), lock x]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x), lock x]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
15

ExeStack: stack=[(HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
16

ExeStack: stack=[(Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q)))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x), lock x]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
15

ExeStack: stack=[(HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
16

ExeStack: stack=[(Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q)))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))), no operation]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x), lock x]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
15

ExeStack: stack=[unlock x, HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1}]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
16

ExeStack: stack=[(lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q)), Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))), no operation]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x), lock x]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
15

ExeStack: stack=[unlock x, HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1}]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
16

ExeStack: stack=[(lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q)), Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x), lock x]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
15

ExeStack: stack=[unlock x]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
16

ExeStack: stack=[(lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
17

ExeStack: stack=[(lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x), lock x]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
15

ExeStack: stack=[unlock x]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
16

ExeStack: stack=[(lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
17

ExeStack: stack=[(lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))), no operation]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x)]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
15

ExeStack: stack=[]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
16

ExeStack: stack=[(HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q), lock q]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
17

ExeStack: stack=[(HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q), lock q]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))), no operation]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x)]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
15

ExeStack: stack=[]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
16

ExeStack: stack=[(HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q), lock q]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
17

ExeStack: stack=[(HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q), lock q]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[unlock x, HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10}]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
16

ExeStack: stack=[(HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q)]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
17

ExeStack: stack=[(HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q), lock q]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[unlock x, HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10}]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
16

ExeStack: stack=[(HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q)]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
17

ExeStack: stack=[(HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q), lock q]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))), no operation]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[unlock x]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=30}, newFree=3}
-------------------------
16

ExeStack: stack=[unlock q, HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10}]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=30}, newFree=3}
-------------------------
17

ExeStack: stack=[(HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q), lock q]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))), no operation]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[unlock x]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=30}, newFree=3}
-------------------------
16

ExeStack: stack=[unlock q, HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10}]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=30}, newFree=3}
-------------------------
17

ExeStack: stack=[(HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q), lock q]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=300}, newFree=3}
-------------------------
14

ExeStack: stack=[]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=300}, newFree=3}
-------------------------
16

ExeStack: stack=[unlock q]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=300}, newFree=3}
-------------------------
17

ExeStack: stack=[(HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q), lock q]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=300}, newFree=3}
-------------------------
13

ExeStack: stack=[(no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=300}, newFree=3}
-------------------------
14

ExeStack: stack=[]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=300}, newFree=3}
-------------------------
16

ExeStack: stack=[unlock q]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=300}, newFree=3}
-------------------------
17

ExeStack: stack=[(HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q), lock q]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=300}, newFree=3}
-------------------------
13

ExeStack: stack=[(lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))), no operation]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=300}, newFree=3}
-------------------------
16

ExeStack: stack=[]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=300}, newFree=3}
-------------------------
17

ExeStack: stack=[(HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q), lock q]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=300}, newFree=3}
-------------------------
13

ExeStack: stack=[(lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))), no operation]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=300}, newFree=3}
-------------------------
16

ExeStack: stack=[]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=300}, newFree=3}
-------------------------
17

ExeStack: stack=[(HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q), lock q]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=300}, newFree=3}
-------------------------
13

ExeStack: stack=[(lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=300}, newFree=3}
-------------------------
17

ExeStack: stack=[(HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=300}, newFree=3}
-------------------------
13

ExeStack: stack=[(lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=300}, newFree=3}
-------------------------
17

ExeStack: stack=[(HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=300}, newFree=3}
-------------------------
13

ExeStack: stack=[(print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))), lock x]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=300}, newFree=3}
-------------------------
17

ExeStack: stack=[unlock q, HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5}]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=300}, newFree=3}
-------------------------
13

ExeStack: stack=[(print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))), lock x]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=300}, newFree=3}
-------------------------
17

ExeStack: stack=[unlock q, HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5}]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=300}, newFree=3}
-------------------------
13

ExeStack: stack=[(print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=305}, newFree=3}
-------------------------
17

ExeStack: stack=[unlock q]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=305}, newFree=3}
-------------------------
13

ExeStack: stack=[(print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=305}, newFree=3}
-------------------------
17

ExeStack: stack=[unlock q]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=305}, newFree=3}
-------------------------
13

ExeStack: stack=[(unlock x (lock q (print(RHExp{expression=v2}) unlock q))), print(RHExp{expression=v1})]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=305}, newFree=3}
-------------------------
17

ExeStack: stack=[]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=305}, newFree=3}
-------------------------
13

ExeStack: stack=[(unlock x (lock q (print(RHExp{expression=v2}) unlock q))), print(RHExp{expression=v1})]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=305}, newFree=3}
-------------------------
17

ExeStack: stack=[]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=305}, newFree=3}
-------------------------
13

ExeStack: stack=[(unlock x (lock q (print(RHExp{expression=v2}) unlock q)))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[190]
FileTable: []
Heap: MyHeap{heap={1=190, 2=305}, newFree=3}
-------------------------
13

ExeStack: stack=[(unlock x (lock q (print(RHExp{expression=v2}) unlock q)))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[190]
FileTable: []
Heap: MyHeap{heap={1=190, 2=305}, newFree=3}
-------------------------
13

ExeStack: stack=[(lock q (print(RHExp{expression=v2}) unlock q)), unlock x]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[190]
FileTable: []
Heap: MyHeap{heap={1=190, 2=305}, newFree=3}
-------------------------
13

ExeStack: stack=[(lock q (print(RHExp{expression=v2}) unlock q)), unlock x]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[190]
FileTable: []
Heap: MyHeap{heap={1=190, 2=305}, newFree=3}
-------------------------
13

ExeStack: stack=[(lock q (print(RHExp{expression=v2}) unlock q))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[190]
FileTable: []
Heap: MyHeap{heap={1=190, 2=305}, newFree=3}
-------------------------
13

ExeStack: stack=[(lock q (print(RHExp{expression=v2}) unlock q))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[190]
FileTable: []
Heap: MyHeap{heap={1=190, 2=305}, newFree=3}
-------------------------
13

ExeStack: stack=[(print(RHExp{expression=v2}) unlock q), lock q]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[190]
FileTable: []
Heap: MyHeap{heap={1=190, 2=305}, newFree=3}
-------------------------
13

ExeStack: stack=[(print(RHExp{expression=v2}) unlock q), lock q]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[190]
FileTable: []
Heap: MyHeap{heap={1=190, 2=305}, newFree=3}
-------------------------
13

ExeStack: stack=[(print(RHExp{expression=v2}) unlock q)]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[190]
FileTable: []
Heap: MyHeap{heap={1=190, 2=305}, newFree=3}
-------------------------
13

ExeStack: stack=[(print(RHExp{expression=v2}) unlock q)]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[190]
FileTable: []
Heap: MyHeap{heap={1=190, 2=305}, newFree=3}
-------------------------
13

ExeStack: stack=[unlock q, print(RHExp{expression=v2})]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[190]
FileTable: []
Heap: MyHeap{heap={1=190, 2=305}, newFree=3}
-------------------------
13

ExeStack: stack=[unlock q, print(RHExp{expression=v2})]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[190]
FileTable: []
Heap: MyHeap{heap={1=190, 2=305}, newFree=3}
-------------------------
13

ExeStack: stack=[unlock q]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[190, 305]
FileTable: []
Heap: MyHeap{heap={1=190, 2=305}, newFree=3}
-------------------------
13

ExeStack: stack=[unlock q]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[190, 305]
FileTable: []
Heap: MyHeap{heap={1=190, 2=305}, newFree=3}
-------------------------
13

ExeStack: stack=[]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[190, 305]
FileTable: []
Heap: MyHeap{heap={1=190, 2=305}, newFree=3}
-------------------------
13

ExeStack: stack=[]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[190, 305]
FileTable: []
Heap: MyHeap{heap={1=190, 2=305}, newFree=3}
-------------------------
13

ExeStack: stack=[(Ref(int) v2; (int x; (int q; (HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))))))))), Ref(int) v1;]
SymTable: dictionary={}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(Ref(int) v2; (int x; (int q; (HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))))))))), Ref(int) v1;]
SymTable: dictionary={}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(Ref(int) v2; (int x; (int q; (HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))))))))))]
SymTable: dictionary={v1=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(Ref(int) v2; (int x; (int q; (HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))))))))))]
SymTable: dictionary={v1=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(int x; (int q; (HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))))))))), Ref(int) v2;]
SymTable: dictionary={v1=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(int x; (int q; (HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))))))))), Ref(int) v2;]
SymTable: dictionary={v1=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(int x; (int q; (HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))))))))]
SymTable: dictionary={v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(int x; (int q; (HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))))))))]
SymTable: dictionary={v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(int q; (HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))))))), int x;]
SymTable: dictionary={v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(int q; (HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))))))), int x;]
SymTable: dictionary={v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(int q; (HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))))))))]
SymTable: dictionary={x=0, v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(int q; (HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))))))))]
SymTable: dictionary={x=0, v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))))))), int q;]
SymTable: dictionary={x=0, v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))))))), int q;]
SymTable: dictionary={x=0, v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))))))]
SymTable: dictionary={q=0, x=0, v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))))))]
SymTable: dictionary={q=0, x=0, v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))))), HeapAllocStmt{id='v1', expression=20}]
SymTable: dictionary={q=0, x=0, v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))))), HeapAllocStmt{id='v1', expression=20}]
SymTable: dictionary={q=0, x=0, v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))))))]
SymTable: dictionary={q=0, x=0, v1=RefValue(1int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20}, newFree=2}
-------------------------
13

ExeStack: stack=[(HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))))))]
SymTable: dictionary={q=0, x=0, v1=RefValue(1int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20}, newFree=2}
-------------------------
13

ExeStack: stack=[(newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))))), HeapAllocStmt{id='v2', expression=30}]
SymTable: dictionary={q=0, x=0, v1=RefValue(1int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20}, newFree=2}
-------------------------
13

ExeStack: stack=[(newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))))), HeapAllocStmt{id='v2', expression=30}]
SymTable: dictionary={q=0, x=0, v1=RefValue(1int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20}, newFree=2}
-------------------------
13

ExeStack: stack=[(newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))))]
SymTable: dictionary={q=0, x=0, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))))]
SymTable: dictionary={q=0, x=0, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))), newlock x]
SymTable: dictionary={q=0, x=0, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))), newlock x]
SymTable: dictionary={q=0, x=0, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))))]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))))]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))), Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x)))]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))), Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x)))]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x)))]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x)))]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))), newlock q]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x)), Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x))]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))), newlock q]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x)), Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x))]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
15

ExeStack: stack=[(lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x))]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
15

ExeStack: stack=[(lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x))]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))), Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q)))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x), lock x]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
15

ExeStack: stack=[(HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x), lock x]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))), Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q)))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x), lock x]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
15

ExeStack: stack=[(HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x), lock x]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x), lock x]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
15

ExeStack: stack=[(HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
16

ExeStack: stack=[(Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q)))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x), lock x]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
15

ExeStack: stack=[(HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
16

ExeStack: stack=[(Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q)))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))), no operation]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x), lock x]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
15

ExeStack: stack=[unlock x, HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1}]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
16

ExeStack: stack=[(lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q)), Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))), no operation]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x), lock x]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
15

ExeStack: stack=[unlock x, HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1}]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
16

ExeStack: stack=[(lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q)), Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x), lock x]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
15

ExeStack: stack=[unlock x]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
16

ExeStack: stack=[(lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
17

ExeStack: stack=[(lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x), lock x]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
15

ExeStack: stack=[unlock x]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
16

ExeStack: stack=[(lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
17

ExeStack: stack=[(lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))), no operation]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x)]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
15

ExeStack: stack=[]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
16

ExeStack: stack=[(HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q), lock q]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
17

ExeStack: stack=[(HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q), lock q]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))), no operation]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x)]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
15

ExeStack: stack=[]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
16

ExeStack: stack=[(HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q), lock q]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
17

ExeStack: stack=[(HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q), lock q]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[unlock x, HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10}]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
16

ExeStack: stack=[(HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q)]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
17

ExeStack: stack=[(HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q), lock q]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[unlock x, HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10}]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
16

ExeStack: stack=[(HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q)]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
17

ExeStack: stack=[(HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q), lock q]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))), no operation]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[unlock x]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=30}, newFree=3}
-------------------------
16

ExeStack: stack=[unlock q, HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10}]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=30}, newFree=3}
-------------------------
17

ExeStack: stack=[(HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q), lock q]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))), no operation]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[unlock x]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=30}, newFree=3}
-------------------------
16

ExeStack: stack=[unlock q, HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10}]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=30}, newFree=3}
-------------------------
17

ExeStack: stack=[(HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q), lock q]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=300}, newFree=3}
-------------------------
14

ExeStack: stack=[]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=300}, newFree=3}
-------------------------
16

ExeStack: stack=[unlock q]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=300}, newFree=3}
-------------------------
17

ExeStack: stack=[(HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q), lock q]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=300}, newFree=3}
-------------------------
13

ExeStack: stack=[(no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=300}, newFree=3}
-------------------------
14

ExeStack: stack=[]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=300}, newFree=3}
-------------------------
16

ExeStack: stack=[unlock q]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=300}, newFree=3}
-------------------------
17

ExeStack: stack=[(HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q), lock q]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=300}, newFree=3}
-------------------------
13

ExeStack: stack=[(lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))), no operation]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=300}, newFree=3}
-------------------------
16

ExeStack: stack=[]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=300}, newFree=3}
-------------------------
17

ExeStack: stack=[(HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q), lock q]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=300}, newFree=3}
-------------------------
13

ExeStack: stack=[(lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))), no operation]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=300}, newFree=3}
-------------------------
16

ExeStack: stack=[]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=300}, newFree=3}
-------------------------
17

ExeStack: stack=[(HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q), lock q]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=300}, newFree=3}
-------------------------
13

ExeStack: stack=[(lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=300}, newFree=3}
-------------------------
17

ExeStack: stack=[(HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=300}, newFree=3}
-------------------------
13

ExeStack: stack=[(lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=300}, newFree=3}
-------------------------
17

ExeStack: stack=[(HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=300}, newFree=3}
-------------------------
13

ExeStack: stack=[(print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))), lock x]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=300}, newFree=3}
-------------------------
17

ExeStack: stack=[unlock q, HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5}]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=300}, newFree=3}
-------------------------
13

ExeStack: stack=[(print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))), lock x]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=300}, newFree=3}
-------------------------
17

ExeStack: stack=[unlock q, HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5}]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=300}, newFree=3}
-------------------------
13

ExeStack: stack=[(print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=305}, newFree=3}
-------------------------
17

ExeStack: stack=[unlock q]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=305}, newFree=3}
-------------------------
13

ExeStack: stack=[(print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=305}, newFree=3}
-------------------------
17

ExeStack: stack=[unlock q]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=305}, newFree=3}
-------------------------
13

ExeStack: stack=[(unlock x (lock q (print(RHExp{expression=v2}) unlock q))), print(RHExp{expression=v1})]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=305}, newFree=3}
-------------------------
17

ExeStack: stack=[]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=305}, newFree=3}
-------------------------
13

ExeStack: stack=[(unlock x (lock q (print(RHExp{expression=v2}) unlock q))), print(RHExp{expression=v1})]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=305}, newFree=3}
-------------------------
17

ExeStack: stack=[]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=305}, newFree=3}
-------------------------
13

ExeStack: stack=[(unlock x (lock q (print(RHExp{expression=v2}) unlock q)))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[190]
FileTable: []
Heap: MyHeap{heap={1=190, 2=305}, newFree=3}
-------------------------
13

ExeStack: stack=[(unlock x (lock q (print(RHExp{expression=v2}) unlock q)))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[190]
FileTable: []
Heap: MyHeap{heap={1=190, 2=305}, newFree=3}
-------------------------
13

ExeStack: stack=[(lock q (print(RHExp{expression=v2}) unlock q)), unlock x]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[190]
FileTable: []
Heap: MyHeap{heap={1=190, 2=305}, newFree=3}
-------------------------
13

ExeStack: stack=[(lock q (print(RHExp{expression=v2}) unlock q)), unlock x]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[190]
FileTable: []
Heap: MyHeap{heap={1=190, 2=305}, newFree=3}
-------------------------
13

ExeStack: stack=[(lock q (print(RHExp{expression=v2}) unlock q))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[190]
FileTable: []
Heap: MyHeap{heap={1=190, 2=305}, newFree=3}
-------------------------
13

ExeStack: stack=[(lock q (print(RHExp{expression=v2}) unlock q))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[190]
FileTable: []
Heap: MyHeap{heap={1=190, 2=305}, newFree=3}
-------------------------
13

ExeStack: stack=[(print(RHExp{expression=v2}) unlock q), lock q]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[190]
FileTable: []
Heap: MyHeap{heap={1=190, 2=305}, newFree=3}
-------------------------
13

ExeStack: stack=[(print(RHExp{expression=v2}) unlock q), lock q]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[190]
FileTable: []
Heap: MyHeap{heap={1=190, 2=305}, newFree=3}
-------------------------
13

ExeStack: stack=[(print(RHExp{expression=v2}) unlock q)]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[190]
FileTable: []
Heap: MyHeap{heap={1=190, 2=305}, newFree=3}
-------------------------
13

ExeStack: stack=[(print(RHExp{expression=v2}) unlock q)]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[190]
FileTable: []
Heap: MyHeap{heap={1=190, 2=305}, newFree=3}
-------------------------
13

ExeStack: stack=[unlock q, print(RHExp{expression=v2})]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[190]
FileTable: []
Heap: MyHeap{heap={1=190, 2=305}, newFree=3}
-------------------------
13

ExeStack: stack=[unlock q, print(RHExp{expression=v2})]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[190]
FileTable: []
Heap: MyHeap{heap={1=190, 2=305}, newFree=3}
-------------------------
13

ExeStack: stack=[unlock q]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[190, 305]
FileTable: []
Heap: MyHeap{heap={1=190, 2=305}, newFree=3}
-------------------------
13

ExeStack: stack=[unlock q]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[190, 305]
FileTable: []
Heap: MyHeap{heap={1=190, 2=305}, newFree=3}
-------------------------
13

ExeStack: stack=[]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[190, 305]
FileTable: []
Heap: MyHeap{heap={1=190, 2=305}, newFree=3}
-------------------------
13

ExeStack: stack=[]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[190, 305]
FileTable: []
Heap: MyHeap{heap={1=190, 2=305}, newFree=3}
-------------------------
13

ExeStack: stack=[(Ref(int) v2; (int x; (int q; (HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))))))))), Ref(int) v1;]
SymTable: dictionary={}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(Ref(int) v2; (int x; (int q; (HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))))))))), Ref(int) v1;]
SymTable: dictionary={}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(Ref(int) v2; (int x; (int q; (HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))))))))))]
SymTable: dictionary={v1=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(Ref(int) v2; (int x; (int q; (HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))))))))))]
SymTable: dictionary={v1=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(int x; (int q; (HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))))))))), Ref(int) v2;]
SymTable: dictionary={v1=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(int x; (int q; (HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))))))))), Ref(int) v2;]
SymTable: dictionary={v1=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(int x; (int q; (HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))))))))]
SymTable: dictionary={v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(int x; (int q; (HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))))))))]
SymTable: dictionary={v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(int q; (HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))))))), int x;]
SymTable: dictionary={v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(int q; (HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))))))), int x;]
SymTable: dictionary={v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(int q; (HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))))))))]
SymTable: dictionary={x=0, v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(int q; (HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))))))))]
SymTable: dictionary={x=0, v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))))))), int q;]
SymTable: dictionary={x=0, v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))))))), int q;]
SymTable: dictionary={x=0, v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))))))]
SymTable: dictionary={q=0, x=0, v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))))))]
SymTable: dictionary={q=0, x=0, v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))))), HeapAllocStmt{id='v1', expression=20}]
SymTable: dictionary={q=0, x=0, v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))))), HeapAllocStmt{id='v1', expression=20}]
SymTable: dictionary={q=0, x=0, v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))))))]
SymTable: dictionary={q=0, x=0, v1=RefValue(1int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20}, newFree=2}
-------------------------
13

ExeStack: stack=[(HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))))))]
SymTable: dictionary={q=0, x=0, v1=RefValue(1int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20}, newFree=2}
-------------------------
13

ExeStack: stack=[(newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))))), HeapAllocStmt{id='v2', expression=30}]
SymTable: dictionary={q=0, x=0, v1=RefValue(1int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20}, newFree=2}
-------------------------
13

ExeStack: stack=[(newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))))), HeapAllocStmt{id='v2', expression=30}]
SymTable: dictionary={q=0, x=0, v1=RefValue(1int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20}, newFree=2}
-------------------------
13

ExeStack: stack=[(newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))))]
SymTable: dictionary={q=0, x=0, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))))]
SymTable: dictionary={q=0, x=0, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))), newlock x]
SymTable: dictionary={q=0, x=0, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))), newlock x]
SymTable: dictionary={q=0, x=0, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))))]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))))]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))), Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x)))]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))), Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x)))]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x)))]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x)))]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))), newlock q]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x)), Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x))]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))), newlock q]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x)), Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x))]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
15

ExeStack: stack=[(lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x))]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
15

ExeStack: stack=[(lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x))]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))), Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q)))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x), lock x]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
15

ExeStack: stack=[(HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x), lock x]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))), Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q)))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x), lock x]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
15

ExeStack: stack=[(HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x), lock x]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x), lock x]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
15

ExeStack: stack=[(HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
16

ExeStack: stack=[(Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q)))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x), lock x]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
15

ExeStack: stack=[(HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
16

ExeStack: stack=[(Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q)))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))), no operation]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x), lock x]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
15

ExeStack: stack=[unlock x, HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1}]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
16

ExeStack: stack=[(lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q)), Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))), no operation]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x), lock x]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
15

ExeStack: stack=[unlock x, HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1}]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
16

ExeStack: stack=[(lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q)), Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x), lock x]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
15

ExeStack: stack=[unlock x]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
16

ExeStack: stack=[(lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
17

ExeStack: stack=[(lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x), lock x]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
15

ExeStack: stack=[unlock x]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
16

ExeStack: stack=[(lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
17

ExeStack: stack=[(lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))), no operation]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x)]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
15

ExeStack: stack=[]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
16

ExeStack: stack=[(HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q), lock q]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
17

ExeStack: stack=[(HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q), lock q]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))), no operation]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x)]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
15

ExeStack: stack=[]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
16

ExeStack: stack=[(HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q), lock q]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
17

ExeStack: stack=[(HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q), lock q]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[unlock x, HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10}]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
16

ExeStack: stack=[(HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q)]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
17

ExeStack: stack=[(HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q), lock q]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[unlock x, HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10}]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
16

ExeStack: stack=[(HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q)]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
17

ExeStack: stack=[(HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q), lock q]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))), no operation]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[unlock x]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=30}, newFree=3}
-------------------------
16

ExeStack: stack=[unlock q, HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10}]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=30}, newFree=3}
-------------------------
17

ExeStack: stack=[(HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q), lock q]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))), no operation]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[unlock x]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=30}, newFree=3}
-------------------------
16

ExeStack: stack=[unlock q, HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10}]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=30}, newFree=3}
-------------------------
17

ExeStack: stack=[(HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q), lock q]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=300}, newFree=3}
-------------------------
14

ExeStack: stack=[]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=300}, newFree=3}
-------------------------
16

ExeStack: stack=[unlock q]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=300}, newFree=3}
-------------------------
17

ExeStack: stack=[(HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q), lock q]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=300}, newFree=3}
-------------------------
13

ExeStack: stack=[(no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=300}, newFree=3}
-------------------------
14

ExeStack: stack=[]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=300}, newFree=3}
-------------------------
16

ExeStack: stack=[unlock q]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=300}, newFree=3}
-------------------------
17

ExeStack: stack=[(HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q), lock q]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=300}, newFree=3}
-------------------------
13

ExeStack: stack=[(lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))), no operation]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=300}, newFree=3}
-------------------------
16

ExeStack: stack=[]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=300}, newFree=3}
-------------------------
17

ExeStack: stack=[(HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q), lock q]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=300}, newFree=3}
-------------------------
13

ExeStack: stack=[(lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))), no operation]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=300}, newFree=3}
-------------------------
16

ExeStack: stack=[]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=300}, newFree=3}
-------------------------
17

ExeStack: stack=[(HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q), lock q]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=300}, newFree=3}
-------------------------
13

ExeStack: stack=[(lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=300}, newFree=3}
-------------------------
17

ExeStack: stack=[(HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=300}, newFree=3}
-------------------------
13

ExeStack: stack=[(lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=300}, newFree=3}
-------------------------
17

ExeStack: stack=[(HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=300}, newFree=3}
-------------------------
13

ExeStack: stack=[(print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))), lock x]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=300}, newFree=3}
-------------------------
17

ExeStack: stack=[unlock q, HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5}]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=300}, newFree=3}
-------------------------
13

ExeStack: stack=[(print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))), lock x]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=300}, newFree=3}
-------------------------
17

ExeStack: stack=[unlock q, HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5}]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=300}, newFree=3}
-------------------------
13

ExeStack: stack=[(print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=305}, newFree=3}
-------------------------
17

ExeStack: stack=[unlock q]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=305}, newFree=3}
-------------------------
13

ExeStack: stack=[(print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=305}, newFree=3}
-------------------------
17

ExeStack: stack=[unlock q]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=305}, newFree=3}
-------------------------
13

ExeStack: stack=[(unlock x (lock q (print(RHExp{expression=v2}) unlock q))), print(RHExp{expression=v1})]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=305}, newFree=3}
-------------------------
17

ExeStack: stack=[]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=305}, newFree=3}
-------------------------
13

ExeStack: stack=[(unlock x (lock q (print(RHExp{expression=v2}) unlock q))), print(RHExp{expression=v1})]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=305}, newFree=3}
-------------------------
17

ExeStack: stack=[]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=305}, newFree=3}
-------------------------
13

ExeStack: stack=[(unlock x (lock q (print(RHExp{expression=v2}) unlock q)))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[190]
FileTable: []
Heap: MyHeap{heap={1=190, 2=305}, newFree=3}
-------------------------
13

ExeStack: stack=[(unlock x (lock q (print(RHExp{expression=v2}) unlock q)))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[190]
FileTable: []
Heap: MyHeap{heap={1=190, 2=305}, newFree=3}
-------------------------
13

ExeStack: stack=[(lock q (print(RHExp{expression=v2}) unlock q)), unlock x]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[190]
FileTable: []
Heap: MyHeap{heap={1=190, 2=305}, newFree=3}
-------------------------
13

ExeStack: stack=[(lock q (print(RHExp{expression=v2}) unlock q)), unlock x]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[190]
FileTable: []
Heap: MyHeap{heap={1=190, 2=305}, newFree=3}
-------------------------
13

ExeStack: stack=[(lock q (print(RHExp{expression=v2}) unlock q))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[190]
FileTable: []
Heap: MyHeap{heap={1=190, 2=305}, newFree=3}
-------------------------
13

ExeStack: stack=[(lock q (print(RHExp{expression=v2}) unlock q))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[190]
FileTable: []
Heap: MyHeap{heap={1=190, 2=305}, newFree=3}
-------------------------
13

ExeStack: stack=[(print(RHExp{expression=v2}) unlock q), lock q]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[190]
FileTable: []
Heap: MyHeap{heap={1=190, 2=305}, newFree=3}
-------------------------
13

ExeStack: stack=[(print(RHExp{expression=v2}) unlock q), lock q]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[190]
FileTable: []
Heap: MyHeap{heap={1=190, 2=305}, newFree=3}
-------------------------
13

ExeStack: stack=[(print(RHExp{expression=v2}) unlock q)]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[190]
FileTable: []
Heap: MyHeap{heap={1=190, 2=305}, newFree=3}
-------------------------
13

ExeStack: stack=[(print(RHExp{expression=v2}) unlock q)]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[190]
FileTable: []
Heap: MyHeap{heap={1=190, 2=305}, newFree=3}
-------------------------
13

ExeStack: stack=[unlock q, print(RHExp{expression=v2})]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[190]
FileTable: []
Heap: MyHeap{heap={1=190, 2=305}, newFree=3}
-------------------------
13

ExeStack: stack=[unlock q, print(RHExp{expression=v2})]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[190]
FileTable: []
Heap: MyHeap{heap={1=190, 2=305}, newFree=3}
-------------------------
13

ExeStack: stack=[unlock q]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[190, 305]
FileTable: []
Heap: MyHeap{heap={1=190, 2=305}, newFree=3}
-------------------------
13

ExeStack: stack=[unlock q]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[190, 305]
FileTable: []
Heap: MyHeap{heap={1=190, 2=305}, newFree=3}
-------------------------
13

ExeStack: stack=[]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[190, 305]
FileTable: []
Heap: MyHeap{heap={1=190, 2=305}, newFree=3}
-------------------------
13

ExeStack: stack=[]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[190, 305]
FileTable: []
Heap: MyHeap{heap={1=190, 2=305}, newFree=3}
-------------------------
13

ExeStack: stack=[(Ref(int) v2; (int x; (int q; (HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))))))))), Ref(int) v1;]
SymTable: dictionary={}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(Ref(int) v2; (int x; (int q; (HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))))))))), Ref(int) v1;]
SymTable: dictionary={}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(Ref(int) v2; (int x; (int q; (HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))))))))))]
SymTable: dictionary={v1=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(Ref(int) v2; (int x; (int q; (HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))))))))))]
SymTable: dictionary={v1=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(int x; (int q; (HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))))))))), Ref(int) v2;]
SymTable: dictionary={v1=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(int x; (int q; (HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))))))))), Ref(int) v2;]
SymTable: dictionary={v1=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(int x; (int q; (HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))))))))]
SymTable: dictionary={v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(int x; (int q; (HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))))))))]
SymTable: dictionary={v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(int q; (HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))))))), int x;]
SymTable: dictionary={v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(int q; (HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))))))), int x;]
SymTable: dictionary={v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(int q; (HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))))))))]
SymTable: dictionary={x=0, v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(int q; (HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))))))))]
SymTable: dictionary={x=0, v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))))))), int q;]
SymTable: dictionary={x=0, v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))))))), int q;]
SymTable: dictionary={x=0, v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))))))]
SymTable: dictionary={q=0, x=0, v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))))))]
SymTable: dictionary={q=0, x=0, v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))))), HeapAllocStmt{id='v1', expression=20}]
SymTable: dictionary={q=0, x=0, v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))))), HeapAllocStmt{id='v1', expression=20}]
SymTable: dictionary={q=0, x=0, v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))))))]
SymTable: dictionary={q=0, x=0, v1=RefValue(1int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20}, newFree=2}
-------------------------
13

ExeStack: stack=[(HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))))))]
SymTable: dictionary={q=0, x=0, v1=RefValue(1int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20}, newFree=2}
-------------------------
13

ExeStack: stack=[(newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))))), HeapAllocStmt{id='v2', expression=30}]
SymTable: dictionary={q=0, x=0, v1=RefValue(1int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20}, newFree=2}
-------------------------
13

ExeStack: stack=[(newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))))), HeapAllocStmt{id='v2', expression=30}]
SymTable: dictionary={q=0, x=0, v1=RefValue(1int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20}, newFree=2}
-------------------------
13

ExeStack: stack=[(newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))))]
SymTable: dictionary={q=0, x=0, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))))]
SymTable: dictionary={q=0, x=0, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))), newlock x]
SymTable: dictionary={q=0, x=0, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))), newlock x]
SymTable: dictionary={q=0, x=0, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))))]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))))]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))), Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x)))]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))), Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x)))]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x)))]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x)))]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))), newlock q]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x)), Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x))]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))), newlock q]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x)), Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x))]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
15

ExeStack: stack=[(lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x))]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
15

ExeStack: stack=[(lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x))]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))), Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q)))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x), lock x]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
15

ExeStack: stack=[(HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x), lock x]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))), Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q)))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x), lock x]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
15

ExeStack: stack=[(HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x), lock x]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x), lock x]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
15

ExeStack: stack=[(HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
16

ExeStack: stack=[(Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q)))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x), lock x]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
15

ExeStack: stack=[(HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
16

ExeStack: stack=[(Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q)))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))), no operation]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x), lock x]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
15

ExeStack: stack=[unlock x, HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1}]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
16

ExeStack: stack=[(lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q)), Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))), no operation]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x), lock x]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
15

ExeStack: stack=[unlock x, HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1}]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
16

ExeStack: stack=[(lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q)), Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x), lock x]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
15

ExeStack: stack=[unlock x]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
16

ExeStack: stack=[(lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
17

ExeStack: stack=[(lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x), lock x]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
15

ExeStack: stack=[unlock x]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
16

ExeStack: stack=[(lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
17

ExeStack: stack=[(lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))), no operation]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x)]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
15

ExeStack: stack=[]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
16

ExeStack: stack=[(HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q), lock q]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
17

ExeStack: stack=[(HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q), lock q]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))), no operation]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x)]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
15

ExeStack: stack=[]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
16

ExeStack: stack=[(HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q), lock q]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
17

ExeStack: stack=[(HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q), lock q]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[unlock x, HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10}]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
16

ExeStack: stack=[(HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q)]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
17

ExeStack: stack=[(HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q), lock q]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[unlock x, HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10}]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
16

ExeStack: stack=[(HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q)]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
17

ExeStack: stack=[(HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q), lock q]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))), no operation]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[unlock x]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=30}, newFree=3}
-------------------------
16

ExeStack: stack=[unlock q, HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10}]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=30}, newFree=3}
-------------------------
17

ExeStack: stack=[(HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q), lock q]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))), no operation]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[unlock x]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=30}, newFree=3}
-------------------------
16

ExeStack: stack=[unlock q, HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10}]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=30}, newFree=3}
-------------------------
17

ExeStack: stack=[(HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q), lock q]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=300}, newFree=3}
-------------------------
14

ExeStack: stack=[]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=300}, newFree=3}
-------------------------
16

ExeStack: stack=[unlock q]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=300}, newFree=3}
-------------------------
17

ExeStack: stack=[(HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q), lock q]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=300}, newFree=3}
-------------------------
13

ExeStack: stack=[(no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=300}, newFree=3}
-------------------------
14

ExeStack: stack=[]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=300}, newFree=3}
-------------------------
16

ExeStack: stack=[unlock q]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=300}, newFree=3}
-------------------------
17

ExeStack: stack=[(HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q), lock q]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=300}, newFree=3}
-------------------------
13

ExeStack: stack=[(lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))), no operation]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=300}, newFree=3}
-------------------------
16

ExeStack: stack=[]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=300}, newFree=3}
-------------------------
17

ExeStack: stack=[(HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q), lock q]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=300}, newFree=3}
-------------------------
13

ExeStack: stack=[(lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))), no operation]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=300}, newFree=3}
-------------------------
16

ExeStack: stack=[]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=300}, newFree=3}
-------------------------
17

ExeStack: stack=[(HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q), lock q]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=300}, newFree=3}
-------------------------
14

ExeStack: stack=[(Ref(int) v2; (HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (int x; (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}+1} unlock x))) (Fork (Fork HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} unlock x)) (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (print(RHExp{expression=v1}) print(RHExp{expression=v2})))))))))))))))))), Ref(int) v1;]
SymTable: dictionary={}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
14

ExeStack: stack=[(Ref(int) v2; (HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (int x; (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}+1} unlock x))) (Fork (Fork HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} unlock x)) (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (print(RHExp{expression=v1}) print(RHExp{expression=v2})))))))))))))))))), Ref(int) v1;]
SymTable: dictionary={}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
14

ExeStack: stack=[(Ref(int) v2; (HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (int x; (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}+1} unlock x))) (Fork (Fork HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} unlock x)) (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (print(RHExp{expression=v1}) print(RHExp{expression=v2}))))))))))))))))))]
SymTable: dictionary={v1=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
14

ExeStack: stack=[(Ref(int) v2; (HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (int x; (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}+1} unlock x))) (Fork (Fork HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} unlock x)) (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (print(RHExp{expression=v1}) print(RHExp{expression=v2}))))))))))))))))))]
SymTable: dictionary={v1=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
14

ExeStack: stack=[(HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (int x; (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}+1} unlock x))) (Fork (Fork HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} unlock x)) (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (print(RHExp{expression=v1}) print(RHExp{expression=v2}))))))))))))))))), Ref(int) v2;]
SymTable: dictionary={v1=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
14

ExeStack: stack=[(HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (int x; (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}+1} unlock x))) (Fork (Fork HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} unlock x)) (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (print(RHExp{expression=v1}) print(RHExp{expression=v2}))))))))))))))))), Ref(int) v2;]
SymTable: dictionary={v1=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
14

ExeStack: stack=[(HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (int x; (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}+1} unlock x))) (Fork (Fork HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} unlock x)) (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (print(RHExp{expression=v1}) print(RHExp{expression=v2})))))))))))))))))]
SymTable: dictionary={v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
14

ExeStack: stack=[(HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (int x; (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}+1} unlock x))) (Fork (Fork HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} unlock x)) (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (print(RHExp{expression=v1}) print(RHExp{expression=v2})))))))))))))))))]
SymTable: dictionary={v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
14

ExeStack: stack=[(HeapAllocStmt{id='v2', expression=30} (int x; (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}+1} unlock x))) (Fork (Fork HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} unlock x)) (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (print(RHExp{expression=v1}) print(RHExp{expression=v2})))))))))))))))), HeapAllocStmt{id='v1', expression=20}]
SymTable: dictionary={v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
14

ExeStack: stack=[(HeapAllocStmt{id='v2', expression=30} (int x; (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}+1} unlock x))) (Fork (Fork HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} unlock x)) (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (print(RHExp{expression=v1}) print(RHExp{expression=v2})))))))))))))))), HeapAllocStmt{id='v1', expression=20}]
SymTable: dictionary={v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
14

ExeStack: stack=[(HeapAllocStmt{id='v2', expression=30} (int x; (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}+1} unlock x))) (Fork (Fork HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} unlock x)) (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (print(RHExp{expression=v1}) print(RHExp{expression=v2}))))))))))))))))]
SymTable: dictionary={v1=RefValue(1int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20}, newFree=2}
-------------------------
14

ExeStack: stack=[(HeapAllocStmt{id='v2', expression=30} (int x; (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}+1} unlock x))) (Fork (Fork HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} unlock x)) (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (print(RHExp{expression=v1}) print(RHExp{expression=v2}))))))))))))))))]
SymTable: dictionary={v1=RefValue(1int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20}, newFree=2}
-------------------------
14

ExeStack: stack=[(int x; (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}+1} unlock x))) (Fork (Fork HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} unlock x)) (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (print(RHExp{expression=v1}) print(RHExp{expression=v2}))))))))))))))), HeapAllocStmt{id='v2', expression=30}]
SymTable: dictionary={v1=RefValue(1int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20}, newFree=2}
-------------------------
14

ExeStack: stack=[(int x; (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}+1} unlock x))) (Fork (Fork HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} unlock x)) (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (print(RHExp{expression=v1}) print(RHExp{expression=v2}))))))))))))))), HeapAllocStmt{id='v2', expression=30}]
SymTable: dictionary={v1=RefValue(1int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20}, newFree=2}
-------------------------
14

ExeStack: stack=[(int x; (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}+1} unlock x))) (Fork (Fork HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} unlock x)) (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (print(RHExp{expression=v1}) print(RHExp{expression=v2})))))))))))))))]
SymTable: dictionary={v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(int x; (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}+1} unlock x))) (Fork (Fork HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} unlock x)) (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (print(RHExp{expression=v1}) print(RHExp{expression=v2})))))))))))))))]
SymTable: dictionary={v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}+1} unlock x))) (Fork (Fork HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} unlock x)) (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (print(RHExp{expression=v1}) print(RHExp{expression=v2})))))))))))))), int x;]
SymTable: dictionary={v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}+1} unlock x))) (Fork (Fork HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} unlock x)) (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (print(RHExp{expression=v1}) print(RHExp{expression=v2})))))))))))))), int x;]
SymTable: dictionary={v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}+1} unlock x))) (Fork (Fork HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} unlock x)) (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (print(RHExp{expression=v1}) print(RHExp{expression=v2}))))))))))))))]
SymTable: dictionary={x=0, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}+1} unlock x))) (Fork (Fork HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} unlock x)) (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (print(RHExp{expression=v1}) print(RHExp{expression=v2}))))))))))))))]
SymTable: dictionary={x=0, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}+1} unlock x))) (Fork (Fork HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} unlock x)) (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (print(RHExp{expression=v1}) print(RHExp{expression=v2}))))))))))))), newlock x]
SymTable: dictionary={x=0, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}+1} unlock x))) (Fork (Fork HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} unlock x)) (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (print(RHExp{expression=v1}) print(RHExp{expression=v2}))))))))))))), newlock x]
SymTable: dictionary={x=0, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}+1} unlock x))) (Fork (Fork HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} unlock x)) (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (print(RHExp{expression=v1}) print(RHExp{expression=v2})))))))))))))]
SymTable: dictionary={x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}+1} unlock x))) (Fork (Fork HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} unlock x)) (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (print(RHExp{expression=v1}) print(RHExp{expression=v2})))))))))))))]
SymTable: dictionary={x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(Fork (Fork HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} unlock x)) (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (print(RHExp{expression=v1}) print(RHExp{expression=v2})))))))))))), Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}+1} unlock x)))]
SymTable: dictionary={x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(Fork (Fork HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} unlock x)) (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (print(RHExp{expression=v1}) print(RHExp{expression=v2})))))))))))), Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}+1} unlock x)))]
SymTable: dictionary={x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(Fork (Fork HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} unlock x)) (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (print(RHExp{expression=v1}) print(RHExp{expression=v2}))))))))))))]
SymTable: dictionary={x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
15

ExeStack: stack=[(Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}+1} unlock x)))]
SymTable: dictionary={x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(Fork (Fork HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} unlock x)) (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (print(RHExp{expression=v1}) print(RHExp{expression=v2}))))))))))))]
SymTable: dictionary={x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
15

ExeStack: stack=[(Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}+1} unlock x)))]
SymTable: dictionary={x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (print(RHExp{expression=v1}) print(RHExp{expression=v2}))))))))))), Fork (Fork HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} unlock x))]
SymTable: dictionary={x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
15

ExeStack: stack=[(lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}+1} unlock x)), Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x))]
SymTable: dictionary={x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (print(RHExp{expression=v1}) print(RHExp{expression=v2}))))))))))), Fork (Fork HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} unlock x))]
SymTable: dictionary={x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
15

ExeStack: stack=[(lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}+1} unlock x)), Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x))]
SymTable: dictionary={x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (print(RHExp{expression=v1}) print(RHExp{expression=v2})))))))))))]
SymTable: dictionary={x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
15

ExeStack: stack=[(lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}+1} unlock x))]
SymTable: dictionary={x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
16

ExeStack: stack=[(Fork HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} unlock x))]
SymTable: dictionary={x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
17

ExeStack: stack=[(lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x))]
SymTable: dictionary={x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (print(RHExp{expression=v1}) print(RHExp{expression=v2})))))))))))]
SymTable: dictionary={x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
15

ExeStack: stack=[(lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}+1} unlock x))]
SymTable: dictionary={x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
16

ExeStack: stack=[(Fork HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} unlock x))]
SymTable: dictionary={x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
17

ExeStack: stack=[(lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x))]
SymTable: dictionary={x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (print(RHExp{expression=v1}) print(RHExp{expression=v2})))))))))), no operation]
SymTable: dictionary={x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
15

ExeStack: stack=[(HeapWriteStmt{id='v1', expression=RHExp{expression=v1}+1} unlock x), lock x]
SymTable: dictionary={x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
16

ExeStack: stack=[(HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} unlock x), Fork HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1}]
SymTable: dictionary={x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
17

ExeStack: stack=[(HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x), lock x]
SymTable: dictionary={x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (print(RHExp{expression=v1}) print(RHExp{expression=v2})))))))))), no operation]
SymTable: dictionary={x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
15

ExeStack: stack=[(HeapWriteStmt{id='v1', expression=RHExp{expression=v1}+1} unlock x), lock x]
SymTable: dictionary={x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
16

ExeStack: stack=[(HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} unlock x), Fork HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1}]
SymTable: dictionary={x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
17

ExeStack: stack=[(HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x), lock x]
SymTable: dictionary={x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (print(RHExp{expression=v1}) print(RHExp{expression=v2}))))))))))]
SymTable: dictionary={x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
15

ExeStack: stack=[(HeapWriteStmt{id='v1', expression=RHExp{expression=v1}+1} unlock x), lock x]
SymTable: dictionary={x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
16

ExeStack: stack=[(HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} unlock x)]
SymTable: dictionary={x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
17

ExeStack: stack=[(HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)]
SymTable: dictionary={x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
18

ExeStack: stack=[HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1}]
SymTable: dictionary={x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (print(RHExp{expression=v1}) print(RHExp{expression=v2}))))))))))]
SymTable: dictionary={x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
15

ExeStack: stack=[(HeapWriteStmt{id='v1', expression=RHExp{expression=v1}+1} unlock x), lock x]
SymTable: dictionary={x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
16

ExeStack: stack=[(HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} unlock x)]
SymTable: dictionary={x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
17

ExeStack: stack=[(HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)]
SymTable: dictionary={x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
18

ExeStack: stack=[HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1}]
SymTable: dictionary={x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(no operation (no operation (no operation (no operation (no operation (no operation (no operation (print(RHExp{expression=v1}) print(RHExp{expression=v2}))))))))), no operation]
SymTable: dictionary={x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=31}, newFree=3}
-------------------------
15

ExeStack: stack=[(HeapWriteStmt{id='v1', expression=RHExp{expression=v1}+1} unlock x), lock x]
SymTable: dictionary={x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=31}, newFree=3}
-------------------------
16

ExeStack: stack=[unlock x, HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1}]
SymTable: dictionary={x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=31}, newFree=3}
-------------------------
17

ExeStack: stack=[unlock x, HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1}]
SymTable: dictionary={x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=31}, newFree=3}
-------------------------
18

ExeStack: stack=[]
SymTable: dictionary={x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=31}, newFree=3}
-------------------------
14

ExeStack: stack=[(no operation (no operation (no operation (no operation (no operation (no operation (no operation (print(RHExp{expression=v1}) print(RHExp{expression=v2}))))))))), no operation]
SymTable: dictionary={x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=31}, newFree=3}
-------------------------
15

ExeStack: stack=[(HeapWriteStmt{id='v1', expression=RHExp{expression=v1}+1} unlock x), lock x]
SymTable: dictionary={x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=31}, newFree=3}
-------------------------
16

ExeStack: stack=[unlock x, HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1}]
SymTable: dictionary={x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=31}, newFree=3}
-------------------------
17

ExeStack: stack=[unlock x, HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1}]
SymTable: dictionary={x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=31}, newFree=3}
-------------------------
18

ExeStack: stack=[]
SymTable: dictionary={x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=31}, newFree=3}
-------------------------
14

ExeStack: stack=[(no operation (no operation (no operation (no operation (no operation (no operation (no operation (print(RHExp{expression=v1}) print(RHExp{expression=v2})))))))))]
SymTable: dictionary={x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=32}, newFree=3}
-------------------------
15

ExeStack: stack=[(HeapWriteStmt{id='v1', expression=RHExp{expression=v1}+1} unlock x), lock x]
SymTable: dictionary={x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=32}, newFree=3}
-------------------------
16

ExeStack: stack=[unlock x]
SymTable: dictionary={x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=32}, newFree=3}
-------------------------
17

ExeStack: stack=[unlock x]
SymTable: dictionary={x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=32}, newFree=3}
-------------------------
14

ExeStack: stack=[(no operation (no operation (no operation (no operation (no operation (no operation (no operation (print(RHExp{expression=v1}) print(RHExp{expression=v2})))))))))]
SymTable: dictionary={x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=32}, newFree=3}
-------------------------
15

ExeStack: stack=[(HeapWriteStmt{id='v1', expression=RHExp{expression=v1}+1} unlock x), lock x]
SymTable: dictionary={x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=32}, newFree=3}
-------------------------
16

ExeStack: stack=[unlock x]
SymTable: dictionary={x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=32}, newFree=3}
-------------------------
17

ExeStack: stack=[unlock x]
SymTable: dictionary={x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=32}, newFree=3}
-------------------------
14

ExeStack: stack=[(no operation (no operation (no operation (no operation (no operation (no operation (print(RHExp{expression=v1}) print(RHExp{expression=v2})))))))), no operation]
SymTable: dictionary={x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=32}, newFree=3}
-------------------------
15

ExeStack: stack=[(HeapWriteStmt{id='v1', expression=RHExp{expression=v1}+1} unlock x)]
SymTable: dictionary={x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=32}, newFree=3}
-------------------------
16

ExeStack: stack=[]
SymTable: dictionary={x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=32}, newFree=3}
-------------------------
17

ExeStack: stack=[]
SymTable: dictionary={x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=32}, newFree=3}
-------------------------
14

ExeStack: stack=[(no operation (no operation (no operation (no operation (no operation (no operation (print(RHExp{expression=v1}) print(RHExp{expression=v2})))))))), no operation]
SymTable: dictionary={x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=32}, newFree=3}
-------------------------
15

ExeStack: stack=[(HeapWriteStmt{id='v1', expression=RHExp{expression=v1}+1} unlock x)]
SymTable: dictionary={x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=32}, newFree=3}
-------------------------
16

ExeStack: stack=[]
SymTable: dictionary={x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=32}, newFree=3}
-------------------------
17

ExeStack: stack=[]
SymTable: dictionary={x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=32}, newFree=3}
-------------------------
14

ExeStack: stack=[(no operation (no operation (no operation (no operation (no operation (no operation (print(RHExp{expression=v1}) print(RHExp{expression=v2}))))))))]
SymTable: dictionary={x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=32}, newFree=3}
-------------------------
15

ExeStack: stack=[unlock x, HeapWriteStmt{id='v1', expression=RHExp{expression=v1}+1}]
SymTable: dictionary={x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=32}, newFree=3}
-------------------------
14

ExeStack: stack=[(no operation (no operation (no operation (no operation (no operation (no operation (print(RHExp{expression=v1}) print(RHExp{expression=v2}))))))))]
SymTable: dictionary={x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=32}, newFree=3}
-------------------------
15

ExeStack: stack=[unlock x, HeapWriteStmt{id='v1', expression=RHExp{expression=v1}+1}]
SymTable: dictionary={x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=32}, newFree=3}
-------------------------
14

ExeStack: stack=[(no operation (no operation (no operation (no operation (no operation (print(RHExp{expression=v1}) print(RHExp{expression=v2}))))))), no operation]
SymTable: dictionary={x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=32}, newFree=3}
-------------------------
15

ExeStack: stack=[unlock x]
SymTable: dictionary={x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=32}, newFree=3}
-------------------------
14

ExeStack: stack=[(no operation (no operation (no operation (no operation (no operation (print(RHExp{expression=v1}) print(RHExp{expression=v2}))))))), no operation]
SymTable: dictionary={x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=32}, newFree=3}
-------------------------
15

ExeStack: stack=[unlock x]
SymTable: dictionary={x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=32}, newFree=3}
-------------------------
14

ExeStack: stack=[(no operation (no operation (no operation (no operation (no operation (print(RHExp{expression=v1}) print(RHExp{expression=v2})))))))]
SymTable: dictionary={x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=32}, newFree=3}
-------------------------
15

ExeStack: stack=[]
SymTable: dictionary={x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=32}, newFree=3}
-------------------------
14

ExeStack: stack=[(no operation (no operation (no operation (no operation (no operation (print(RHExp{expression=v1}) print(RHExp{expression=v2})))))))]
SymTable: dictionary={x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=32}, newFree=3}
-------------------------
15

ExeStack: stack=[]
SymTable: dictionary={x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=32}, newFree=3}
-------------------------
14

ExeStack: stack=[(no operation (no operation (no operation (no operation (print(RHExp{expression=v1}) print(RHExp{expression=v2})))))), no operation]
SymTable: dictionary={x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=32}, newFree=3}
-------------------------
14

ExeStack: stack=[(no operation (no operation (no operation (no operation (print(RHExp{expression=v1}) print(RHExp{expression=v2})))))), no operation]
SymTable: dictionary={x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=32}, newFree=3}
-------------------------
14

ExeStack: stack=[(no operation (no operation (no operation (no operation (print(RHExp{expression=v1}) print(RHExp{expression=v2}))))))]
SymTable: dictionary={x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=32}, newFree=3}
-------------------------
14

ExeStack: stack=[(no operation (no operation (no operation (no operation (print(RHExp{expression=v1}) print(RHExp{expression=v2}))))))]
SymTable: dictionary={x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=32}, newFree=3}
-------------------------
14

ExeStack: stack=[(no operation (no operation (no operation (print(RHExp{expression=v1}) print(RHExp{expression=v2}))))), no operation]
SymTable: dictionary={x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=32}, newFree=3}
-------------------------
14

ExeStack: stack=[(no operation (no operation (no operation (print(RHExp{expression=v1}) print(RHExp{expression=v2}))))), no operation]
SymTable: dictionary={x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=32}, newFree=3}
-------------------------
14

ExeStack: stack=[(no operation (no operation (no operation (print(RHExp{expression=v1}) print(RHExp{expression=v2})))))]
SymTable: dictionary={x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=32}, newFree=3}
-------------------------
14

ExeStack: stack=[(no operation (no operation (no operation (print(RHExp{expression=v1}) print(RHExp{expression=v2})))))]
SymTable: dictionary={x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=32}, newFree=3}
-------------------------
14

ExeStack: stack=[(no operation (no operation (print(RHExp{expression=v1}) print(RHExp{expression=v2})))), no operation]
SymTable: dictionary={x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=32}, newFree=3}
-------------------------
14

ExeStack: stack=[(no operation (no operation (print(RHExp{expression=v1}) print(RHExp{expression=v2})))), no operation]
SymTable: dictionary={x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=32}, newFree=3}
-------------------------
14

ExeStack: stack=[(no operation (no operation (print(RHExp{expression=v1}) print(RHExp{expression=v2}))))]
SymTable: dictionary={x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=32}, newFree=3}
-------------------------
14

ExeStack: stack=[(no operation (no operation (print(RHExp{expression=v1}) print(RHExp{expression=v2}))))]
SymTable: dictionary={x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=32}, newFree=3}
-------------------------
14

ExeStack: stack=[(no operation (print(RHExp{expression=v1}) print(RHExp{expression=v2}))), no operation]
SymTable: dictionary={x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=32}, newFree=3}
-------------------------
14

ExeStack: stack=[(no operation (print(RHExp{expression=v1}) print(RHExp{expression=v2}))), no operation]
SymTable: dictionary={x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=32}, newFree=3}
-------------------------
14

ExeStack: stack=[(no operation (print(RHExp{expression=v1}) print(RHExp{expression=v2})))]
SymTable: dictionary={x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=32}, newFree=3}
-------------------------
14

ExeStack: stack=[(no operation (print(RHExp{expression=v1}) print(RHExp{expression=v2})))]
SymTable: dictionary={x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=32}, newFree=3}
-------------------------
14

ExeStack: stack=[(print(RHExp{expression=v1}) print(RHExp{expression=v2})), no operation]
SymTable: dictionary={x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=32}, newFree=3}
-------------------------
14

ExeStack: stack=[(print(RHExp{expression=v1}) print(RHExp{expression=v2})), no operation]
SymTable: dictionary={x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=32}, newFree=3}
-------------------------
14

ExeStack: stack=[(print(RHExp{expression=v1}) print(RHExp{expression=v2}))]
SymTable: dictionary={x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=32}, newFree=3}
-------------------------
14

ExeStack: stack=[(print(RHExp{expression=v1}) print(RHExp{expression=v2}))]
SymTable: dictionary={x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=32}, newFree=3}
-------------------------
14

ExeStack: stack=[print(RHExp{expression=v2}), print(RHExp{expression=v1})]
SymTable: dictionary={x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=32}, newFree=3}
-------------------------
14

ExeStack: stack=[print(RHExp{expression=v2}), print(RHExp{expression=v1})]
SymTable: dictionary={x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=32}, newFree=3}
-------------------------
14

ExeStack: stack=[print(RHExp{expression=v2})]
SymTable: dictionary={x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[20]
FileTable: []
Heap: MyHeap{heap={1=20, 2=32}, newFree=3}
-------------------------
14

ExeStack: stack=[print(RHExp{expression=v2})]
SymTable: dictionary={x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[20]
FileTable: []
Heap: MyHeap{heap={1=20, 2=32}, newFree=3}
-------------------------
14

ExeStack: stack=[]
SymTable: dictionary={x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[20, 32]
FileTable: []
Heap: MyHeap{heap={1=20, 2=32}, newFree=3}
-------------------------
14

ExeStack: stack=[]
SymTable: dictionary={x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[20, 32]
FileTable: []
Heap: MyHeap{heap={1=20, 2=32}, newFree=3}
-------------------------
14

ExeStack: stack=[(Ref(int) v2; (HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (int x; (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}+1} unlock x))) (Fork (Fork HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} unlock x)) (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (print(RHExp{expression=v1}) print(RHExp{expression=v2})))))))))))))))))), Ref(int) v1;]
SymTable: dictionary={}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
14

ExeStack: stack=[(Ref(int) v2; (HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (int x; (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}+1} unlock x))) (Fork (Fork HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} unlock x)) (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (print(RHExp{expression=v1}) print(RHExp{expression=v2})))))))))))))))))), Ref(int) v1;]
SymTable: dictionary={}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
14

ExeStack: stack=[(Ref(int) v2; (HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (int x; (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}+1} unlock x))) (Fork (Fork HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} unlock x)) (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (print(RHExp{expression=v1}) print(RHExp{expression=v2}))))))))))))))))))]
SymTable: dictionary={v1=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
14

ExeStack: stack=[(Ref(int) v2; (HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (int x; (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}+1} unlock x))) (Fork (Fork HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} unlock x)) (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (print(RHExp{expression=v1}) print(RHExp{expression=v2}))))))))))))))))))]
SymTable: dictionary={v1=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
14

ExeStack: stack=[(HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (int x; (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}+1} unlock x))) (Fork (Fork HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} unlock x)) (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (print(RHExp{expression=v1}) print(RHExp{expression=v2}))))))))))))))))), Ref(int) v2;]
SymTable: dictionary={v1=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
14

ExeStack: stack=[(HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (int x; (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}+1} unlock x))) (Fork (Fork HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} unlock x)) (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (print(RHExp{expression=v1}) print(RHExp{expression=v2}))))))))))))))))), Ref(int) v2;]
SymTable: dictionary={v1=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
14

ExeStack: stack=[(HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (int x; (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}+1} unlock x))) (Fork (Fork HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} unlock x)) (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (print(RHExp{expression=v1}) print(RHExp{expression=v2})))))))))))))))))]
SymTable: dictionary={v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
14

ExeStack: stack=[(HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (int x; (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}+1} unlock x))) (Fork (Fork HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} unlock x)) (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (print(RHExp{expression=v1}) print(RHExp{expression=v2})))))))))))))))))]
SymTable: dictionary={v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
14

ExeStack: stack=[(HeapAllocStmt{id='v2', expression=30} (int x; (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}+1} unlock x))) (Fork (Fork HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} unlock x)) (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (print(RHExp{expression=v1}) print(RHExp{expression=v2})))))))))))))))), HeapAllocStmt{id='v1', expression=20}]
SymTable: dictionary={v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
14

ExeStack: stack=[(HeapAllocStmt{id='v2', expression=30} (int x; (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}+1} unlock x))) (Fork (Fork HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} unlock x)) (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (print(RHExp{expression=v1}) print(RHExp{expression=v2})))))))))))))))), HeapAllocStmt{id='v1', expression=20}]
SymTable: dictionary={v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
14

ExeStack: stack=[(HeapAllocStmt{id='v2', expression=30} (int x; (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}+1} unlock x))) (Fork (Fork HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} unlock x)) (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (print(RHExp{expression=v1}) print(RHExp{expression=v2}))))))))))))))))]
SymTable: dictionary={v1=RefValue(1int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20}, newFree=2}
-------------------------
14

ExeStack: stack=[(HeapAllocStmt{id='v2', expression=30} (int x; (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}+1} unlock x))) (Fork (Fork HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} unlock x)) (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (print(RHExp{expression=v1}) print(RHExp{expression=v2}))))))))))))))))]
SymTable: dictionary={v1=RefValue(1int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20}, newFree=2}
-------------------------
14

ExeStack: stack=[(int x; (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}+1} unlock x))) (Fork (Fork HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} unlock x)) (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (print(RHExp{expression=v1}) print(RHExp{expression=v2}))))))))))))))), HeapAllocStmt{id='v2', expression=30}]
SymTable: dictionary={v1=RefValue(1int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20}, newFree=2}
-------------------------
14

ExeStack: stack=[(int x; (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}+1} unlock x))) (Fork (Fork HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} unlock x)) (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (print(RHExp{expression=v1}) print(RHExp{expression=v2}))))))))))))))), HeapAllocStmt{id='v2', expression=30}]
SymTable: dictionary={v1=RefValue(1int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20}, newFree=2}
-------------------------
14

ExeStack: stack=[(int x; (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}+1} unlock x))) (Fork (Fork HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} unlock x)) (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (print(RHExp{expression=v1}) print(RHExp{expression=v2})))))))))))))))]
SymTable: dictionary={v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(int x; (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}+1} unlock x))) (Fork (Fork HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} unlock x)) (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (print(RHExp{expression=v1}) print(RHExp{expression=v2})))))))))))))))]
SymTable: dictionary={v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}+1} unlock x))) (Fork (Fork HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} unlock x)) (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (print(RHExp{expression=v1}) print(RHExp{expression=v2})))))))))))))), int x;]
SymTable: dictionary={v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}+1} unlock x))) (Fork (Fork HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} unlock x)) (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (print(RHExp{expression=v1}) print(RHExp{expression=v2})))))))))))))), int x;]
SymTable: dictionary={v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}+1} unlock x))) (Fork (Fork HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} unlock x)) (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (print(RHExp{expression=v1}) print(RHExp{expression=v2}))))))))))))))]
SymTable: dictionary={x=0, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}+1} unlock x))) (Fork (Fork HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} unlock x)) (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (print(RHExp{expression=v1}) print(RHExp{expression=v2}))))))))))))))]
SymTable: dictionary={x=0, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}+1} unlock x))) (Fork (Fork HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} unlock x)) (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (print(RHExp{expression=v1}) print(RHExp{expression=v2}))))))))))))), newlock x]
SymTable: dictionary={x=0, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}+1} unlock x))) (Fork (Fork HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} unlock x)) (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (print(RHExp{expression=v1}) print(RHExp{expression=v2}))))))))))))), newlock x]
SymTable: dictionary={x=0, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}+1} unlock x))) (Fork (Fork HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} unlock x)) (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (print(RHExp{expression=v1}) print(RHExp{expression=v2})))))))))))))]
SymTable: dictionary={x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}+1} unlock x))) (Fork (Fork HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} unlock x)) (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (print(RHExp{expression=v1}) print(RHExp{expression=v2})))))))))))))]
SymTable: dictionary={x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(Ref(int) v2; (HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (int x; (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}+1} unlock x))) (Fork (Fork HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} unlock x)) (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (print(RHExp{expression=v1}) print(RHExp{expression=v2})))))))))))))))))), Ref(int) v1;]
SymTable: dictionary={}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
14

ExeStack: stack=[(Ref(int) v2; (HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (int x; (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}+1} unlock x))) (Fork (Fork HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} unlock x)) (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (print(RHExp{expression=v1}) print(RHExp{expression=v2})))))))))))))))))), Ref(int) v1;]
SymTable: dictionary={}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
14

ExeStack: stack=[(Ref(int) v2; (HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (int x; (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}+1} unlock x))) (Fork (Fork HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} unlock x)) (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (print(RHExp{expression=v1}) print(RHExp{expression=v2}))))))))))))))))))]
SymTable: dictionary={v1=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
14

ExeStack: stack=[(Ref(int) v2; (HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (int x; (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}+1} unlock x))) (Fork (Fork HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} unlock x)) (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (print(RHExp{expression=v1}) print(RHExp{expression=v2}))))))))))))))))))]
SymTable: dictionary={v1=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
14

ExeStack: stack=[(HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (int x; (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}+1} unlock x))) (Fork (Fork HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} unlock x)) (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (print(RHExp{expression=v1}) print(RHExp{expression=v2}))))))))))))))))), Ref(int) v2;]
SymTable: dictionary={v1=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
14

ExeStack: stack=[(HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (int x; (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}+1} unlock x))) (Fork (Fork HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} unlock x)) (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (print(RHExp{expression=v1}) print(RHExp{expression=v2}))))))))))))))))), Ref(int) v2;]
SymTable: dictionary={v1=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
14

ExeStack: stack=[(HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (int x; (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}+1} unlock x))) (Fork (Fork HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} unlock x)) (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (print(RHExp{expression=v1}) print(RHExp{expression=v2})))))))))))))))))]
SymTable: dictionary={v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
14

ExeStack: stack=[(HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (int x; (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}+1} unlock x))) (Fork (Fork HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} unlock x)) (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (print(RHExp{expression=v1}) print(RHExp{expression=v2})))))))))))))))))]
SymTable: dictionary={v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
14

ExeStack: stack=[(HeapAllocStmt{id='v2', expression=30} (int x; (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}+1} unlock x))) (Fork (Fork HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} unlock x)) (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (print(RHExp{expression=v1}) print(RHExp{expression=v2})))))))))))))))), HeapAllocStmt{id='v1', expression=20}]
SymTable: dictionary={v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
14

ExeStack: stack=[(HeapAllocStmt{id='v2', expression=30} (int x; (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}+1} unlock x))) (Fork (Fork HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} unlock x)) (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (print(RHExp{expression=v1}) print(RHExp{expression=v2})))))))))))))))), HeapAllocStmt{id='v1', expression=20}]
SymTable: dictionary={v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
14

ExeStack: stack=[(HeapAllocStmt{id='v2', expression=30} (int x; (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}+1} unlock x))) (Fork (Fork HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} unlock x)) (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (print(RHExp{expression=v1}) print(RHExp{expression=v2}))))))))))))))))]
SymTable: dictionary={v1=RefValue(1int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20}, newFree=2}
-------------------------
14

ExeStack: stack=[(HeapAllocStmt{id='v2', expression=30} (int x; (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}+1} unlock x))) (Fork (Fork HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} unlock x)) (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (print(RHExp{expression=v1}) print(RHExp{expression=v2}))))))))))))))))]
SymTable: dictionary={v1=RefValue(1int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20}, newFree=2}
-------------------------
14

ExeStack: stack=[(int x; (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}+1} unlock x))) (Fork (Fork HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} unlock x)) (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (print(RHExp{expression=v1}) print(RHExp{expression=v2}))))))))))))))), HeapAllocStmt{id='v2', expression=30}]
SymTable: dictionary={v1=RefValue(1int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20}, newFree=2}
-------------------------
14

ExeStack: stack=[(int x; (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}+1} unlock x))) (Fork (Fork HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} unlock x)) (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (print(RHExp{expression=v1}) print(RHExp{expression=v2}))))))))))))))), HeapAllocStmt{id='v2', expression=30}]
SymTable: dictionary={v1=RefValue(1int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20}, newFree=2}
-------------------------
14

ExeStack: stack=[(int x; (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}+1} unlock x))) (Fork (Fork HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} unlock x)) (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (print(RHExp{expression=v1}) print(RHExp{expression=v2})))))))))))))))]
SymTable: dictionary={v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(int x; (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}+1} unlock x))) (Fork (Fork HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} unlock x)) (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (print(RHExp{expression=v1}) print(RHExp{expression=v2})))))))))))))))]
SymTable: dictionary={v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}+1} unlock x))) (Fork (Fork HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} unlock x)) (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (print(RHExp{expression=v1}) print(RHExp{expression=v2})))))))))))))), int x;]
SymTable: dictionary={v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}+1} unlock x))) (Fork (Fork HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} unlock x)) (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (print(RHExp{expression=v1}) print(RHExp{expression=v2})))))))))))))), int x;]
SymTable: dictionary={v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}+1} unlock x))) (Fork (Fork HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} unlock x)) (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (print(RHExp{expression=v1}) print(RHExp{expression=v2}))))))))))))))]
SymTable: dictionary={x=0, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}+1} unlock x))) (Fork (Fork HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} unlock x)) (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (print(RHExp{expression=v1}) print(RHExp{expression=v2}))))))))))))))]
SymTable: dictionary={x=0, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}+1} unlock x))) (Fork (Fork HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} unlock x)) (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (print(RHExp{expression=v1}) print(RHExp{expression=v2}))))))))))))), newlock x]
SymTable: dictionary={x=0, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}+1} unlock x))) (Fork (Fork HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} unlock x)) (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (print(RHExp{expression=v1}) print(RHExp{expression=v2}))))))))))))), newlock x]
SymTable: dictionary={x=0, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}+1} unlock x))) (Fork (Fork HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} unlock x)) (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (print(RHExp{expression=v1}) print(RHExp{expression=v2})))))))))))))]
SymTable: dictionary={x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}+1} unlock x))) (Fork (Fork HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} unlock x)) (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (print(RHExp{expression=v1}) print(RHExp{expression=v2})))))))))))))]
SymTable: dictionary={x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(Fork (Fork HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} unlock x)) (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (print(RHExp{expression=v1}) print(RHExp{expression=v2})))))))))))), Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}+1} unlock x)))]
SymTable: dictionary={x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(Fork (Fork HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} unlock x)) (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (print(RHExp{expression=v1}) print(RHExp{expression=v2})))))))))))), Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}+1} unlock x)))]
SymTable: dictionary={x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(Fork (Fork HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} unlock x)) (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (print(RHExp{expression=v1}) print(RHExp{expression=v2}))))))))))))]
SymTable: dictionary={x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
15

ExeStack: stack=[(Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}+1} unlock x)))]
SymTable: dictionary={x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(Fork (Fork HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+1} unlock x)) (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (no operation (print(RHExp{expression=v1}) print(RHExp{expression=v2}))))))))))))]
SymTable: dictionary={x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
15

ExeStack: stack=[(Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}+1} unlock x)))]
SymTable: dictionary={x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(Ref(int) v2; (int x; (int q; (HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))))))))), Ref(int) v1;]
SymTable: dictionary={}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(Ref(int) v2; (int x; (int q; (HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))))))))), Ref(int) v1;]
SymTable: dictionary={}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(Ref(int) v2; (int x; (int q; (HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))))))))))]
SymTable: dictionary={v1=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(Ref(int) v2; (int x; (int q; (HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))))))))))]
SymTable: dictionary={v1=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(int x; (int q; (HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))))))))), Ref(int) v2;]
SymTable: dictionary={v1=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(int x; (int q; (HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))))))))), Ref(int) v2;]
SymTable: dictionary={v1=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(int x; (int q; (HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))))))))]
SymTable: dictionary={v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(int x; (int q; (HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))))))))]
SymTable: dictionary={v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(int q; (HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))))))), int x;]
SymTable: dictionary={v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(int q; (HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))))))), int x;]
SymTable: dictionary={v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(int q; (HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))))))))]
SymTable: dictionary={x=0, v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(int q; (HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))))))))]
SymTable: dictionary={x=0, v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))))))), int q;]
SymTable: dictionary={x=0, v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))))))), int q;]
SymTable: dictionary={x=0, v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))))))]
SymTable: dictionary={q=0, x=0, v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))))))]
SymTable: dictionary={q=0, x=0, v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))))), HeapAllocStmt{id='v1', expression=20}]
SymTable: dictionary={q=0, x=0, v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))))), HeapAllocStmt{id='v1', expression=20}]
SymTable: dictionary={q=0, x=0, v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))))))]
SymTable: dictionary={q=0, x=0, v1=RefValue(1int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20}, newFree=2}
-------------------------
13

ExeStack: stack=[(HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))))))]
SymTable: dictionary={q=0, x=0, v1=RefValue(1int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20}, newFree=2}
-------------------------
13

ExeStack: stack=[(newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))))), HeapAllocStmt{id='v2', expression=30}]
SymTable: dictionary={q=0, x=0, v1=RefValue(1int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20}, newFree=2}
-------------------------
13

ExeStack: stack=[(newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))))), HeapAllocStmt{id='v2', expression=30}]
SymTable: dictionary={q=0, x=0, v1=RefValue(1int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20}, newFree=2}
-------------------------
13

ExeStack: stack=[(newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))))]
SymTable: dictionary={q=0, x=0, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))))]
SymTable: dictionary={q=0, x=0, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))), newlock x]
SymTable: dictionary={q=0, x=0, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))), newlock x]
SymTable: dictionary={q=0, x=0, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))))]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))))]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(Ref(int) v2; (int x; (int q; (HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))))))))), Ref(int) v1;]
SymTable: dictionary={}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(Ref(int) v2; (int x; (int q; (HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))))))))), Ref(int) v1;]
SymTable: dictionary={}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(Ref(int) v2; (int x; (int q; (HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))))))))))]
SymTable: dictionary={v1=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(Ref(int) v2; (int x; (int q; (HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))))))))))]
SymTable: dictionary={v1=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(int x; (int q; (HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))))))))), Ref(int) v2;]
SymTable: dictionary={v1=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(int x; (int q; (HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))))))))), Ref(int) v2;]
SymTable: dictionary={v1=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(int x; (int q; (HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))))))))]
SymTable: dictionary={v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(int x; (int q; (HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))))))))]
SymTable: dictionary={v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(int q; (HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))))))), int x;]
SymTable: dictionary={v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(int q; (HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))))))), int x;]
SymTable: dictionary={v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(int q; (HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))))))))]
SymTable: dictionary={x=0, v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(int q; (HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))))))))]
SymTable: dictionary={x=0, v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))))))), int q;]
SymTable: dictionary={x=0, v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))))))), int q;]
SymTable: dictionary={x=0, v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))))))]
SymTable: dictionary={q=0, x=0, v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))))))]
SymTable: dictionary={q=0, x=0, v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))))), HeapAllocStmt{id='v1', expression=20}]
SymTable: dictionary={q=0, x=0, v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))))), HeapAllocStmt{id='v1', expression=20}]
SymTable: dictionary={q=0, x=0, v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))))))]
SymTable: dictionary={q=0, x=0, v1=RefValue(1int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20}, newFree=2}
-------------------------
13

ExeStack: stack=[(HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))))))]
SymTable: dictionary={q=0, x=0, v1=RefValue(1int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20}, newFree=2}
-------------------------
13

ExeStack: stack=[(newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))))), HeapAllocStmt{id='v2', expression=30}]
SymTable: dictionary={q=0, x=0, v1=RefValue(1int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20}, newFree=2}
-------------------------
13

ExeStack: stack=[(newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))))), HeapAllocStmt{id='v2', expression=30}]
SymTable: dictionary={q=0, x=0, v1=RefValue(1int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20}, newFree=2}
-------------------------
13

ExeStack: stack=[(newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))))]
SymTable: dictionary={q=0, x=0, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))))]
SymTable: dictionary={q=0, x=0, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))), newlock x]
SymTable: dictionary={q=0, x=0, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))), newlock x]
SymTable: dictionary={q=0, x=0, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))))]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))))]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))), Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x)))]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))), Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x)))]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x)))]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x)))]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))), newlock q]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x)), Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x))]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))), newlock q]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x)), Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x))]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
15

ExeStack: stack=[(lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x))]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
15

ExeStack: stack=[(lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x))]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))), Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q)))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x), lock x]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
15

ExeStack: stack=[(HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x), lock x]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))), Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q)))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x), lock x]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
15

ExeStack: stack=[(HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x), lock x]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x), lock x]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
15

ExeStack: stack=[(HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
16

ExeStack: stack=[(Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q)))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x), lock x]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
15

ExeStack: stack=[(HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
16

ExeStack: stack=[(Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q)))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))), no operation]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x), lock x]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
15

ExeStack: stack=[unlock x, HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1}]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
16

ExeStack: stack=[(lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q)), Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))), no operation]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x), lock x]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
15

ExeStack: stack=[unlock x, HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1}]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
16

ExeStack: stack=[(lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q)), Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x), lock x]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
15

ExeStack: stack=[unlock x]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
16

ExeStack: stack=[(lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
17

ExeStack: stack=[(lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x), lock x]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
15

ExeStack: stack=[unlock x]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
16

ExeStack: stack=[(lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
17

ExeStack: stack=[(lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))), no operation]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x)]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
15

ExeStack: stack=[]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
16

ExeStack: stack=[(HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q), lock q]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
17

ExeStack: stack=[(HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q), lock q]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))), no operation]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x)]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
15

ExeStack: stack=[]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
16

ExeStack: stack=[(HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q), lock q]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
17

ExeStack: stack=[(HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q), lock q]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[unlock x, HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10}]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
16

ExeStack: stack=[(HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q)]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
17

ExeStack: stack=[(HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q), lock q]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[unlock x, HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10}]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
16

ExeStack: stack=[(HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q)]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
17

ExeStack: stack=[(HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q), lock q]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=19, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))), no operation]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[unlock x]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=30}, newFree=3}
-------------------------
16

ExeStack: stack=[unlock q, HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10}]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=30}, newFree=3}
-------------------------
17

ExeStack: stack=[(HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q), lock q]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))), no operation]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[unlock x]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=30}, newFree=3}
-------------------------
16

ExeStack: stack=[unlock q, HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10}]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=30}, newFree=3}
-------------------------
17

ExeStack: stack=[(HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q), lock q]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=300}, newFree=3}
-------------------------
14

ExeStack: stack=[]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=300}, newFree=3}
-------------------------
16

ExeStack: stack=[unlock q]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=300}, newFree=3}
-------------------------
17

ExeStack: stack=[(HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q), lock q]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=300}, newFree=3}
-------------------------
13

ExeStack: stack=[(no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=300}, newFree=3}
-------------------------
14

ExeStack: stack=[]
SymTable: dictionary={q=0, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=300}, newFree=3}
-------------------------
16

ExeStack: stack=[unlock q]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=300}, newFree=3}
-------------------------
17

ExeStack: stack=[(HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q), lock q]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=300}, newFree=3}
-------------------------
13

ExeStack: stack=[(lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))), no operation]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=300}, newFree=3}
-------------------------
16

ExeStack: stack=[]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=300}, newFree=3}
-------------------------
17

ExeStack: stack=[(HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q), lock q]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=300}, newFree=3}
-------------------------
13

ExeStack: stack=[(lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))), no operation]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=300}, newFree=3}
-------------------------
16

ExeStack: stack=[]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=300}, newFree=3}
-------------------------
17

ExeStack: stack=[(HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q), lock q]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=300}, newFree=3}
-------------------------
13

ExeStack: stack=[(lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=300}, newFree=3}
-------------------------
17

ExeStack: stack=[(HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=300}, newFree=3}
-------------------------
13

ExeStack: stack=[(lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=300}, newFree=3}
-------------------------
17

ExeStack: stack=[(HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=300}, newFree=3}
-------------------------
13

ExeStack: stack=[(print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))), lock x]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=300}, newFree=3}
-------------------------
17

ExeStack: stack=[unlock q, HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5}]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=300}, newFree=3}
-------------------------
13

ExeStack: stack=[(print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))), lock x]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=300}, newFree=3}
-------------------------
17

ExeStack: stack=[unlock q, HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5}]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=300}, newFree=3}
-------------------------
13

ExeStack: stack=[(print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=305}, newFree=3}
-------------------------
17

ExeStack: stack=[unlock q]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=305}, newFree=3}
-------------------------
13

ExeStack: stack=[(print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=305}, newFree=3}
-------------------------
17

ExeStack: stack=[unlock q]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=305}, newFree=3}
-------------------------
13

ExeStack: stack=[(unlock x (lock q (print(RHExp{expression=v2}) unlock q))), print(RHExp{expression=v1})]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=305}, newFree=3}
-------------------------
17

ExeStack: stack=[]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=305}, newFree=3}
-------------------------
13

ExeStack: stack=[(unlock x (lock q (print(RHExp{expression=v2}) unlock q))), print(RHExp{expression=v1})]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=305}, newFree=3}
-------------------------
17

ExeStack: stack=[]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=190, 2=305}, newFree=3}
-------------------------
13

ExeStack: stack=[(unlock x (lock q (print(RHExp{expression=v2}) unlock q)))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[190]
FileTable: []
Heap: MyHeap{heap={1=190, 2=305}, newFree=3}
-------------------------
13

ExeStack: stack=[(unlock x (lock q (print(RHExp{expression=v2}) unlock q)))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[190]
FileTable: []
Heap: MyHeap{heap={1=190, 2=305}, newFree=3}
-------------------------
13

ExeStack: stack=[(lock q (print(RHExp{expression=v2}) unlock q)), unlock x]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[190]
FileTable: []
Heap: MyHeap{heap={1=190, 2=305}, newFree=3}
-------------------------
13

ExeStack: stack=[(lock q (print(RHExp{expression=v2}) unlock q)), unlock x]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[190]
FileTable: []
Heap: MyHeap{heap={1=190, 2=305}, newFree=3}
-------------------------
13

ExeStack: stack=[(lock q (print(RHExp{expression=v2}) unlock q))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[190]
FileTable: []
Heap: MyHeap{heap={1=190, 2=305}, newFree=3}
-------------------------
13

ExeStack: stack=[(lock q (print(RHExp{expression=v2}) unlock q))]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[190]
FileTable: []
Heap: MyHeap{heap={1=190, 2=305}, newFree=3}
-------------------------
13

ExeStack: stack=[(print(RHExp{expression=v2}) unlock q), lock q]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[190]
FileTable: []
Heap: MyHeap{heap={1=190, 2=305}, newFree=3}
-------------------------
13

ExeStack: stack=[(print(RHExp{expression=v2}) unlock q), lock q]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[190]
FileTable: []
Heap: MyHeap{heap={1=190, 2=305}, newFree=3}
-------------------------
13

ExeStack: stack=[(print(RHExp{expression=v2}) unlock q)]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[190]
FileTable: []
Heap: MyHeap{heap={1=190, 2=305}, newFree=3}
-------------------------
13

ExeStack: stack=[(print(RHExp{expression=v2}) unlock q)]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[190]
FileTable: []
Heap: MyHeap{heap={1=190, 2=305}, newFree=3}
-------------------------
13

ExeStack: stack=[unlock q, print(RHExp{expression=v2})]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[190]
FileTable: []
Heap: MyHeap{heap={1=190, 2=305}, newFree=3}
-------------------------
13

ExeStack: stack=[unlock q, print(RHExp{expression=v2})]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[190]
FileTable: []
Heap: MyHeap{heap={1=190, 2=305}, newFree=3}
-------------------------
13

ExeStack: stack=[unlock q]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[190, 305]
FileTable: []
Heap: MyHeap{heap={1=190, 2=305}, newFree=3}
-------------------------
13

ExeStack: stack=[unlock q]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[190, 305]
FileTable: []
Heap: MyHeap{heap={1=190, 2=305}, newFree=3}
-------------------------
13

ExeStack: stack=[]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[190, 305]
FileTable: []
Heap: MyHeap{heap={1=190, 2=305}, newFree=3}
-------------------------
13

ExeStack: stack=[]
SymTable: dictionary={q=2, x=1, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[190, 305]
FileTable: []
Heap: MyHeap{heap={1=190, 2=305}, newFree=3}
-------------------------
13

ExeStack: stack=[(Ref(int) v2; (bool x; (int q; (HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))))))))), Ref(int) v1;]
SymTable: dictionary={}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(Ref(int) v2; (bool x; (int q; (HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))))))))), Ref(int) v1;]
SymTable: dictionary={}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(Ref(int) v2; (bool x; (int q; (HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))))))))))]
SymTable: dictionary={v1=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(Ref(int) v2; (bool x; (int q; (HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))))))))))]
SymTable: dictionary={v1=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(bool x; (int q; (HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))))))))), Ref(int) v2;]
SymTable: dictionary={v1=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(bool x; (int q; (HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))))))))), Ref(int) v2;]
SymTable: dictionary={v1=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(bool x; (int q; (HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))))))))]
SymTable: dictionary={v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(bool x; (int q; (HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))))))))]
SymTable: dictionary={v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(int q; (HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))))))), bool x;]
SymTable: dictionary={v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(int q; (HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))))))), bool x;]
SymTable: dictionary={v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(int q; (HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))))))))]
SymTable: dictionary={x=false, v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(int q; (HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))))))))]
SymTable: dictionary={x=false, v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))))))), int q;]
SymTable: dictionary={x=false, v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))))))), int q;]
SymTable: dictionary={x=false, v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))))))]
SymTable: dictionary={q=0, x=false, v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(HeapAllocStmt{id='v1', expression=20} (HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))))))]
SymTable: dictionary={q=0, x=false, v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))))), HeapAllocStmt{id='v1', expression=20}]
SymTable: dictionary={q=0, x=false, v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))))), HeapAllocStmt{id='v1', expression=20}]
SymTable: dictionary={q=0, x=false, v1=RefValue(0int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={}, newFree=1}
-------------------------
13

ExeStack: stack=[(HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))))))]
SymTable: dictionary={q=0, x=false, v1=RefValue(1int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20}, newFree=2}
-------------------------
13

ExeStack: stack=[(HeapAllocStmt{id='v2', expression=30} (newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))))))]
SymTable: dictionary={q=0, x=false, v1=RefValue(1int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20}, newFree=2}
-------------------------
13

ExeStack: stack=[(newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))))), HeapAllocStmt{id='v2', expression=30}]
SymTable: dictionary={q=0, x=false, v1=RefValue(1int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20}, newFree=2}
-------------------------
13

ExeStack: stack=[(newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))))), HeapAllocStmt{id='v2', expression=30}]
SymTable: dictionary={q=0, x=false, v1=RefValue(1int), v2=RefValue(0int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20}, newFree=2}
-------------------------
13

ExeStack: stack=[(newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))))]
SymTable: dictionary={q=0, x=false, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(newlock x (Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))))]
SymTable: dictionary={q=0, x=false, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))), newlock x]
SymTable: dictionary={q=0, x=false, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))), newlock x]
SymTable: dictionary={q=0, x=false, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))))]
SymTable: dictionary={q=0, x=false, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x))) (newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))))]
SymTable: dictionary={q=0, x=false, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))), Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x)))]
SymTable: dictionary={q=0, x=false, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q))))))))))), Fork (Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x)))]
SymTable: dictionary={q=0, x=false, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))]
SymTable: dictionary={q=0, x=false, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x)))]
SymTable: dictionary={q=0, x=false, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(newlock q (Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))))]
SymTable: dictionary={q=0, x=false, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x)) (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x)))]
SymTable: dictionary={q=0, x=false, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))), newlock q]
SymTable: dictionary={q=0, x=false, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x)), Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x))]
SymTable: dictionary={q=0, x=false, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
13

ExeStack: stack=[(Fork (Fork (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}+5} unlock q)) (lock q (HeapWriteStmt{id='v2', expression=RHExp{expression=v2}*10} unlock q))) (no operation (no operation (no operation (no operation (lock x (print(RHExp{expression=v1}) (unlock x (lock q (print(RHExp{expression=v2}) unlock q)))))))))), newlock q]
SymTable: dictionary={q=0, x=false, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
14

ExeStack: stack=[(lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}*10} unlock x)), Fork (lock x (HeapWriteStmt{id='v1', expression=RHExp{expression=v1}-1} unlock x))]
SymTable: dictionary={q=0, x=false, v1=RefValue(1int), v2=RefValue(2int)}
Out: list=[]
FileTable: []
Heap: MyHeap{heap={1=20, 2=30}, newFree=3}
-------------------------
